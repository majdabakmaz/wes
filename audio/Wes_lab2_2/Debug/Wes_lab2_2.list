
Wes_lab2_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b0  080045b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045b8  080045b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b8  080045b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000d8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d216  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000227f  00000000  00000000  0002d2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  0002f538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d0  00000000  00000000  0002ff08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fad  00000000  00000000  000307d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e342  00000000  00000000  00052785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5cb5  00000000  00000000  00060ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012677c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fc8  00000000  00000000  001267d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004434 	.word	0x08004434

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004434 	.word	0x08004434

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <init_AudioReset>:
#include "gpio.h"
#include "audio.h"
#include "i2s.h"
#include "i2c.h"

void init_AudioReset() {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
 HAL_GPIO_WritePin(GPIOD , AUDIO_RESET_PIN , GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2110      	movs	r1, #16
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <init_AudioReset+0x14>)
 8000572:	f000 ff5b 	bl	800142c <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40020c00 	.word	0x40020c00

08000580 <configAudio>:

void configAudio () {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af02      	add	r7, sp, #8
 uint8_t bytes [2];
 init_AudioReset ();
 8000586:	f7ff ffef 	bl	8000568 <init_AudioReset>

/** Power sequence **/
 // Set Power Control Register to "on" state
 bytes [0] = 0x02;
 800058a:	2302      	movs	r3, #2
 800058c:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x01;
 800058e:	2301      	movs	r3, #1
 8000590:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit(&hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000592:	1d3a      	adds	r2, r7, #4
 8000594:	2364      	movs	r3, #100	; 0x64
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2302      	movs	r3, #2
 800059a:	2194      	movs	r1, #148	; 0x94
 800059c:	486f      	ldr	r0, [pc, #444]	; (800075c <configAudio+0x1dc>)
 800059e:	f001 f8a3 	bl	80016e8 <HAL_I2C_Master_Transmit>

 /** Initialization sequence **/
 bytes [0] = 0x00;
 80005a2:	2300      	movs	r3, #0
 80005a4:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x99;
 80005a6:	2399      	movs	r3, #153	; 0x99
 80005a8:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 80005aa:	1d3a      	adds	r2, r7, #4
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2302      	movs	r3, #2
 80005b2:	2194      	movs	r1, #148	; 0x94
 80005b4:	4869      	ldr	r0, [pc, #420]	; (800075c <configAudio+0x1dc>)
 80005b6:	f001 f897 	bl	80016e8 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x47;
 80005ba:	2347      	movs	r3, #71	; 0x47
 80005bc:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x80;
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 80005c2:	1d3a      	adds	r2, r7, #4
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2302      	movs	r3, #2
 80005ca:	2194      	movs	r1, #148	; 0x94
 80005cc:	4863      	ldr	r0, [pc, #396]	; (800075c <configAudio+0x1dc>)
 80005ce:	f001 f88b 	bl	80016e8 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x32;
 80005d2:	2332      	movs	r3, #50	; 0x32
 80005d4:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x80;
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 80005da:	1d3a      	adds	r2, r7, #4
 80005dc:	2364      	movs	r3, #100	; 0x64
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2302      	movs	r3, #2
 80005e2:	2194      	movs	r1, #148	; 0x94
 80005e4:	485d      	ldr	r0, [pc, #372]	; (800075c <configAudio+0x1dc>)
 80005e6:	f001 f87f 	bl	80016e8 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x32;
 80005ea:	2332      	movs	r3, #50	; 0x32
 80005ec:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 80005f2:	1d3a      	adds	r2, r7, #4
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2302      	movs	r3, #2
 80005fa:	2194      	movs	r1, #148	; 0x94
 80005fc:	4857      	ldr	r0, [pc, #348]	; (800075c <configAudio+0x1dc>)
 80005fe:	f001 f873 	bl	80016e8 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x00;
 8000602:	2300      	movs	r3, #0
 8000604:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x00;
 8000606:	2300      	movs	r3, #0
 8000608:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 800060a:	1d3a      	adds	r2, r7, #4
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2302      	movs	r3, #2
 8000612:	2194      	movs	r1, #148	; 0x94
 8000614:	4851      	ldr	r0, [pc, #324]	; (800075c <configAudio+0x1dc>)
 8000616:	f001 f867 	bl	80016e8 <HAL_I2C_Master_Transmit>

 /** Ctl registers configuration **/
 bytes [0] = 0x04;
 800061a:	2304      	movs	r3, #4
 800061c:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0xAF;
 800061e:	23af      	movs	r3, #175	; 0xaf
 8000620:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000622:	1d3a      	adds	r2, r7, #4
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2302      	movs	r3, #2
 800062a:	2194      	movs	r1, #148	; 0x94
 800062c:	484b      	ldr	r0, [pc, #300]	; (800075c <configAudio+0x1dc>)
 800062e:	f001 f85b 	bl	80016e8 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x0D;
 8000632:	230d      	movs	r3, #13
 8000634:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x70;
 8000636:	2370      	movs	r3, #112	; 0x70
 8000638:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 800063a:	1d3a      	adds	r2, r7, #4
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2302      	movs	r3, #2
 8000642:	2194      	movs	r1, #148	; 0x94
 8000644:	4845      	ldr	r0, [pc, #276]	; (800075c <configAudio+0x1dc>)
 8000646:	f001 f84f 	bl	80016e8 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x05;
 800064a:	2305      	movs	r3, #5
 800064c:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x81;
 800064e:	2381      	movs	r3, #129	; 0x81
 8000650:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000652:	1d3a      	adds	r2, r7, #4
 8000654:	2364      	movs	r3, #100	; 0x64
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	2194      	movs	r1, #148	; 0x94
 800065c:	483f      	ldr	r0, [pc, #252]	; (800075c <configAudio+0x1dc>)
 800065e:	f001 f843 	bl	80016e8 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x06;
 8000662:	2306      	movs	r3, #6
 8000664:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x07;
 8000666:	2307      	movs	r3, #7
 8000668:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 800066a:	1d3a      	adds	r2, r7, #4
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2302      	movs	r3, #2
 8000672:	2194      	movs	r1, #148	; 0x94
 8000674:	4839      	ldr	r0, [pc, #228]	; (800075c <configAudio+0x1dc>)
 8000676:	f001 f837 	bl	80016e8 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x0A;
 800067a:	230a      	movs	r3, #10
 800067c:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x00;
 800067e:	2300      	movs	r3, #0
 8000680:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000682:	1d3a      	adds	r2, r7, #4
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2302      	movs	r3, #2
 800068a:	2194      	movs	r1, #148	; 0x94
 800068c:	4833      	ldr	r0, [pc, #204]	; (800075c <configAudio+0x1dc>)
 800068e:	f001 f82b 	bl	80016e8 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x27;
 8000692:	2327      	movs	r3, #39	; 0x27
 8000694:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x00;
 8000696:	2300      	movs	r3, #0
 8000698:	717b      	strb	r3, [r7, #5]
 HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 800069a:	1d3a      	adds	r2, r7, #4
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2302      	movs	r3, #2
 80006a2:	2194      	movs	r1, #148	; 0x94
 80006a4:	482d      	ldr	r0, [pc, #180]	; (800075c <configAudio+0x1dc>)
 80006a6:	f001 f81f 	bl	80016e8 <HAL_I2C_Master_Transmit>

 bytes [0] = 0x1F;
 80006aa:	231f      	movs	r3, #31
 80006ac:	713b      	strb	r3, [r7, #4]
 bytes [1] = 0x0F;
 80006ae:	230f      	movs	r3, #15
 80006b0:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 80006b2:	1d3a      	adds	r2, r7, #4
 80006b4:	2364      	movs	r3, #100	; 0x64
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2302      	movs	r3, #2
 80006ba:	2194      	movs	r1, #148	; 0x94
 80006bc:	4827      	ldr	r0, [pc, #156]	; (800075c <configAudio+0x1dc>)
 80006be:	f001 f813 	bl	80016e8 <HAL_I2C_Master_Transmit>

  bytes [0] = 0x22;
 80006c2:	2322      	movs	r3, #34	; 0x22
 80006c4:	713b      	strb	r3, [r7, #4]
  bytes [1] = 0xC0;
 80006c6:	23c0      	movs	r3, #192	; 0xc0
 80006c8:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 80006ca:	1d3a      	adds	r2, r7, #4
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2302      	movs	r3, #2
 80006d2:	2194      	movs	r1, #148	; 0x94
 80006d4:	4821      	ldr	r0, [pc, #132]	; (800075c <configAudio+0x1dc>)
 80006d6:	f001 f807 	bl	80016e8 <HAL_I2C_Master_Transmit>

  bytes [0] = 0x14;
 80006da:	2314      	movs	r3, #20
 80006dc:	713b      	strb	r3, [r7, #4]
  bytes [1] = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 80006e2:	1d3a      	adds	r2, r7, #4
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2302      	movs	r3, #2
 80006ea:	2194      	movs	r1, #148	; 0x94
 80006ec:	481b      	ldr	r0, [pc, #108]	; (800075c <configAudio+0x1dc>)
 80006ee:	f000 fffb 	bl	80016e8 <HAL_I2C_Master_Transmit>

  bytes [0] = 0x15;
 80006f2:	2315      	movs	r3, #21
 80006f4:	713b      	strb	r3, [r7, #4]
  bytes [1] = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 80006fa:	1d3a      	adds	r2, r7, #4
 80006fc:	2364      	movs	r3, #100	; 0x64
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2302      	movs	r3, #2
 8000702:	2194      	movs	r1, #148	; 0x94
 8000704:	4815      	ldr	r0, [pc, #84]	; (800075c <configAudio+0x1dc>)
 8000706:	f000 ffef 	bl	80016e8 <HAL_I2C_Master_Transmit>

  bytes [0] = 0x20;
 800070a:	2320      	movs	r3, #32
 800070c:	713b      	strb	r3, [r7, #4]
  bytes [1] = 24;
 800070e:	2318      	movs	r3, #24
 8000710:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000712:	1d3a      	adds	r2, r7, #4
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2302      	movs	r3, #2
 800071a:	2194      	movs	r1, #148	; 0x94
 800071c:	480f      	ldr	r0, [pc, #60]	; (800075c <configAudio+0x1dc>)
 800071e:	f000 ffe3 	bl	80016e8 <HAL_I2C_Master_Transmit>

  bytes [0] = 0x21;
 8000722:	2321      	movs	r3, #33	; 0x21
 8000724:	713b      	strb	r3, [r7, #4]
  bytes [1] = 24;
 8000726:	2318      	movs	r3, #24
 8000728:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 800072a:	1d3a      	adds	r2, r7, #4
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2302      	movs	r3, #2
 8000732:	2194      	movs	r1, #148	; 0x94
 8000734:	4809      	ldr	r0, [pc, #36]	; (800075c <configAudio+0x1dc>)
 8000736:	f000 ffd7 	bl	80016e8 <HAL_I2C_Master_Transmit>

  /** Power up **/
  bytes [0] = 0x02;
 800073a:	2302      	movs	r3, #2
 800073c:	713b      	strb	r3, [r7, #4]
  bytes [1] = 0x9E;
 800073e:	239e      	movs	r3, #158	; 0x9e
 8000740:	717b      	strb	r3, [r7, #5]
  HAL_I2C_Master_Transmit (& hi2c1 , AUDIO_I2C_ADDRESS , bytes , 2, 100) ;
 8000742:	1d3a      	adds	r2, r7, #4
 8000744:	2364      	movs	r3, #100	; 0x64
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2302      	movs	r3, #2
 800074a:	2194      	movs	r1, #148	; 0x94
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <configAudio+0x1dc>)
 800074e:	f000 ffcb 	bl	80016e8 <HAL_I2C_Master_Transmit>

 }
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000098 	.word	0x20000098

08000760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a2c      	ldr	r2, [pc, #176]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a25      	ldr	r2, [pc, #148]	; (8000830 <MX_GPIO_Init+0xd0>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2110      	movs	r1, #16
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000808:	f000 fe10 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800080c:	2310      	movs	r3, #16
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000814:	2302      	movs	r3, #2
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000824:	f000 fc66 	bl	80010f4 <HAL_GPIO_Init>

}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020c00 	.word	0x40020c00

08000838 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2C1_Init+0x50>)
 800083e:	4a13      	ldr	r2, [pc, #76]	; (800088c <MX_I2C1_Init+0x54>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_I2C1_Init+0x50>)
 8000844:	4a12      	ldr	r2, [pc, #72]	; (8000890 <MX_I2C1_Init+0x58>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_I2C1_Init+0x50>)
 8000856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_I2C1_Init+0x50>)
 8000876:	f000 fdf3 	bl	8001460 <HAL_I2C_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 f986 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000098 	.word	0x20000098
 800088c:	40005400 	.word	0x40005400
 8000890:	000186a0 	.word	0x000186a0

08000894 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <HAL_I2C_MspInit+0x84>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d12b      	bne.n	800090e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a17      	ldr	r2, [pc, #92]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008d2:	23c0      	movs	r3, #192	; 0xc0
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d6:	2312      	movs	r3, #18
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e2:	2304      	movs	r3, #4
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <HAL_I2C_MspInit+0x8c>)
 80008ee:	f000 fc01 	bl	80010f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_I2C_MspInit+0x88>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40005400 	.word	0x40005400
 800091c:	40023800 	.word	0x40023800
 8000920:	40020400 	.word	0x40020400

08000924 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_I2S3_Init+0x54>)
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <MX_I2S3_Init+0x58>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_I2S3_Init+0x54>)
 8000930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000934:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_I2S3_Init+0x54>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_I2S3_Init+0x54>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_I2S3_Init+0x54>)
 8000944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000948:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_I2S3_Init+0x54>)
 800094c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000950:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_I2S3_Init+0x54>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_I2S3_Init+0x54>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_I2S3_Init+0x54>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_I2S3_Init+0x54>)
 8000966:	f001 f9c7 	bl	8001cf8 <HAL_I2S_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000970:	f000 f90e 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000ec 	.word	0x200000ec
 800097c:	40003c00 	.word	0x40003c00

08000980 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08e      	sub	sp, #56	; 0x38
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a31      	ldr	r2, [pc, #196]	; (8000a70 <HAL_I2S_MspInit+0xf0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d15a      	bne.n	8000a66 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009b0:	2301      	movs	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80009b4:	23c0      	movs	r3, #192	; 0xc0
 80009b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fbc3 	bl	800314c <HAL_RCCEx_PeriphCLKConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80009cc:	f000 f8e0 	bl	8000b90 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <HAL_I2S_MspInit+0xf4>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <HAL_I2S_MspInit+0xf4>)
 80009da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <HAL_I2S_MspInit+0xf4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_I2S_MspInit+0xf4>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a1f      	ldr	r2, [pc, #124]	; (8000a74 <HAL_I2S_MspInit+0xf4>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <HAL_I2S_MspInit+0xf4>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_I2S_MspInit+0xf4>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <HAL_I2S_MspInit+0xf4>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_I2S_MspInit+0xf4>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a24:	2310      	movs	r3, #16
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a34:	2306      	movs	r3, #6
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480e      	ldr	r0, [pc, #56]	; (8000a78 <HAL_I2S_MspInit+0xf8>)
 8000a40:	f000 fb58 	bl	80010f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000a44:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a56:	2306      	movs	r3, #6
 8000a58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4806      	ldr	r0, [pc, #24]	; (8000a7c <HAL_I2S_MspInit+0xfc>)
 8000a62:	f000 fb47 	bl	80010f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a66:	bf00      	nop
 8000a68:	3738      	adds	r7, #56	; 0x38
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40003c00 	.word	0x40003c00
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020800 	.word	0x40020800

08000a80 <main>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int main ( void ) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

 HAL_Init ();
 8000a86:	f000 f9dd 	bl	8000e44 <HAL_Init>
 SystemClock_Config ();
 8000a8a:	f000 f817 	bl	8000abc <SystemClock_Config>
 MX_GPIO_Init ();
 8000a8e:	f7ff fe67 	bl	8000760 <MX_GPIO_Init>
 MX_I2C1_Init ();
 8000a92:	f7ff fed1 	bl	8000838 <MX_I2C1_Init>
 MX_I2S3_Init ();
 8000a96:	f7ff ff45 	bl	8000924 <MX_I2S3_Init>

 configAudio ();
 8000a9a:	f7ff fd71 	bl	8000580 <configAudio>
 uint16_t signal ;
  while(1){
  signal = rand();
 8000a9e:	f002 fcc7 	bl	8003430 <rand>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	80fb      	strh	r3, [r7, #6]
  HAL_I2S_Transmit(&hi2s3 , &signal , 1, 10) ;
 8000aa8:	1db9      	adds	r1, r7, #6
 8000aaa:	230a      	movs	r3, #10
 8000aac:	2201      	movs	r2, #1
 8000aae:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <main+0x38>)
 8000ab0:	f001 fa62 	bl	8001f78 <HAL_I2S_Transmit>
  signal = rand();
 8000ab4:	e7f3      	b.n	8000a9e <main+0x1e>
 8000ab6:	bf00      	nop
 8000ab8:	200000ec 	.word	0x200000ec

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b094      	sub	sp, #80	; 0x50
 8000ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	2230      	movs	r2, #48	; 0x30
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fca8 	bl	8003420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <SystemClock_Config+0xcc>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a27      	ldr	r2, [pc, #156]	; (8000b88 <SystemClock_Config+0xcc>)
 8000aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <SystemClock_Config+0xcc>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <SystemClock_Config+0xd0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <SystemClock_Config+0xd0>)
 8000b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <SystemClock_Config+0xd0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b22:	2302      	movs	r3, #2
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b30:	23a8      	movs	r3, #168	; 0xa8
 8000b32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3c:	f107 0320 	add.w	r3, r7, #32
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 fea3 	bl	800288c <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b4c:	f000 f820 	bl	8000b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b50:	230f      	movs	r3, #15
 8000b52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b54:	2302      	movs	r3, #2
 8000b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 f904 	bl	8002d7c <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b7a:	f000 f809 	bl	8000b90 <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3750      	adds	r7, #80	; 0x50
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40007000 	.word	0x40007000

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 f956 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	return 1;
 8000c44:	2301      	movs	r3, #1
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_kill>:

int _kill(int pid, int sig)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c5a:	f002 fbb7 	bl	80033cc <__errno>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2216      	movs	r2, #22
 8000c62:	601a      	str	r2, [r3, #0]
	return -1;
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <_exit>:

void _exit (int status)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ffe7 	bl	8000c50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c82:	e7fe      	b.n	8000c82 <_exit+0x12>

08000c84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e00a      	b.n	8000cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c96:	f3af 8000 	nop.w
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	b2ca      	uxtb	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf0      	blt.n	8000c96 <_read+0x12>
	}

return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e009      	b.n	8000ce4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbf1      	blt.n	8000cd0 <_write+0x12>
	}
	return len;
 8000cec:	687b      	ldr	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_close>:

int _close(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	return -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_isatty>:

int _isatty(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	return 1;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f002 fb1c 	bl	80033cc <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20020000 	.word	0x20020000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	2000008c 	.word	0x2000008c
 8000dc8:	20000148 	.word	0x20000148

08000dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e0c:	4c0b      	ldr	r4, [pc, #44]	; (8000e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e1a:	f7ff ffd7 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f002 fadb 	bl	80033d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fe2d 	bl	8000a80 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e34:	080045c0 	.word	0x080045c0
  ldr r2, =_sbss
 8000e38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e3c:	20000148 	.word	0x20000148

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <HAL_Init+0x40>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_Init+0x40>)
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_Init+0x40>)
 8000e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f90d 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	200f      	movs	r0, #15
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fe90 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f917 	bl	80010da <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 f8ed 	bl	80010a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000134 	.word	0x20000134

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000134 	.word	0x20000134

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff8e 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff47 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff5c 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff8e 	bl	8000fe0 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffb0 	bl	8001048 <SysTick_Config>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	e16b      	b.n	80013e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 815a 	bne.w	80013e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d005      	beq.n	8001146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001142:	2b02      	cmp	r3, #2
 8001144:	d130      	bne.n	80011a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d017      	beq.n	80011e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d123      	bne.n	8001238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	69b9      	ldr	r1, [r7, #24]
 8001234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0203 	and.w	r2, r3, #3
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80b4 	beq.w	80013e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b60      	ldr	r3, [pc, #384]	; (8001400 <HAL_GPIO_Init+0x30c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a5f      	ldr	r2, [pc, #380]	; (8001400 <HAL_GPIO_Init+0x30c>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b5d      	ldr	r3, [pc, #372]	; (8001400 <HAL_GPIO_Init+0x30c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001296:	4a5b      	ldr	r2, [pc, #364]	; (8001404 <HAL_GPIO_Init+0x310>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_GPIO_Init+0x314>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d02b      	beq.n	800131a <HAL_GPIO_Init+0x226>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a51      	ldr	r2, [pc, #324]	; (800140c <HAL_GPIO_Init+0x318>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d025      	beq.n	8001316 <HAL_GPIO_Init+0x222>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a50      	ldr	r2, [pc, #320]	; (8001410 <HAL_GPIO_Init+0x31c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01f      	beq.n	8001312 <HAL_GPIO_Init+0x21e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4f      	ldr	r2, [pc, #316]	; (8001414 <HAL_GPIO_Init+0x320>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d019      	beq.n	800130e <HAL_GPIO_Init+0x21a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4e      	ldr	r2, [pc, #312]	; (8001418 <HAL_GPIO_Init+0x324>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x216>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4d      	ldr	r2, [pc, #308]	; (800141c <HAL_GPIO_Init+0x328>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x212>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4c      	ldr	r2, [pc, #304]	; (8001420 <HAL_GPIO_Init+0x32c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x20e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4b      	ldr	r2, [pc, #300]	; (8001424 <HAL_GPIO_Init+0x330>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x20a>
 80012fa:	2307      	movs	r3, #7
 80012fc:	e00e      	b.n	800131c <HAL_GPIO_Init+0x228>
 80012fe:	2308      	movs	r3, #8
 8001300:	e00c      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001302:	2306      	movs	r3, #6
 8001304:	e00a      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001306:	2305      	movs	r3, #5
 8001308:	e008      	b.n	800131c <HAL_GPIO_Init+0x228>
 800130a:	2304      	movs	r3, #4
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x228>
 800130e:	2303      	movs	r3, #3
 8001310:	e004      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001312:	2302      	movs	r3, #2
 8001314:	e002      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_GPIO_Init+0x228>
 800131a:	2300      	movs	r3, #0
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	f002 0203 	and.w	r2, r2, #3
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	4093      	lsls	r3, r2
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800132c:	4935      	ldr	r1, [pc, #212]	; (8001404 <HAL_GPIO_Init+0x310>)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3302      	adds	r3, #2
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <HAL_GPIO_Init+0x334>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800135e:	4a32      	ldr	r2, [pc, #200]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <HAL_GPIO_Init+0x334>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b2:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3301      	adds	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	f67f ae90 	bls.w	8001110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40013800 	.word	0x40013800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020400 	.word	0x40020400
 8001410:	40020800 	.word	0x40020800
 8001414:	40020c00 	.word	0x40020c00
 8001418:	40021000 	.word	0x40021000
 800141c:	40021400 	.word	0x40021400
 8001420:	40021800 	.word	0x40021800
 8001424:	40021c00 	.word	0x40021c00
 8001428:	40013c00 	.word	0x40013c00

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001448:	e003      	b.n	8001452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	619a      	str	r2, [r3, #24]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e12b      	b.n	80016ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fa04 	bl	8000894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014c4:	f001 fe2e 	bl	8003124 <HAL_RCC_GetPCLK1Freq>
 80014c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a81      	ldr	r2, [pc, #516]	; (80016d4 <HAL_I2C_Init+0x274>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d807      	bhi.n	80014e4 <HAL_I2C_Init+0x84>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4a80      	ldr	r2, [pc, #512]	; (80016d8 <HAL_I2C_Init+0x278>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	bf94      	ite	ls
 80014dc:	2301      	movls	r3, #1
 80014de:	2300      	movhi	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	e006      	b.n	80014f2 <HAL_I2C_Init+0x92>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4a7d      	ldr	r2, [pc, #500]	; (80016dc <HAL_I2C_Init+0x27c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	bf94      	ite	ls
 80014ec:	2301      	movls	r3, #1
 80014ee:	2300      	movhi	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0e7      	b.n	80016ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4a78      	ldr	r2, [pc, #480]	; (80016e0 <HAL_I2C_Init+0x280>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0c9b      	lsrs	r3, r3, #18
 8001504:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	430a      	orrs	r2, r1
 8001518:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4a6a      	ldr	r2, [pc, #424]	; (80016d4 <HAL_I2C_Init+0x274>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d802      	bhi.n	8001534 <HAL_I2C_Init+0xd4>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3301      	adds	r3, #1
 8001532:	e009      	b.n	8001548 <HAL_I2C_Init+0xe8>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800153a:	fb02 f303 	mul.w	r3, r2, r3
 800153e:	4a69      	ldr	r2, [pc, #420]	; (80016e4 <HAL_I2C_Init+0x284>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	099b      	lsrs	r3, r3, #6
 8001546:	3301      	adds	r3, #1
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	430b      	orrs	r3, r1
 800154e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800155a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	495c      	ldr	r1, [pc, #368]	; (80016d4 <HAL_I2C_Init+0x274>)
 8001564:	428b      	cmp	r3, r1
 8001566:	d819      	bhi.n	800159c <HAL_I2C_Init+0x13c>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1e59      	subs	r1, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fbb1 f3f3 	udiv	r3, r1, r3
 8001576:	1c59      	adds	r1, r3, #1
 8001578:	f640 73fc 	movw	r3, #4092	; 0xffc
 800157c:	400b      	ands	r3, r1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00a      	beq.n	8001598 <HAL_I2C_Init+0x138>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1e59      	subs	r1, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001590:	3301      	adds	r3, #1
 8001592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001596:	e051      	b.n	800163c <HAL_I2C_Init+0x1dc>
 8001598:	2304      	movs	r3, #4
 800159a:	e04f      	b.n	800163c <HAL_I2C_Init+0x1dc>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d111      	bne.n	80015c8 <HAL_I2C_Init+0x168>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1e58      	subs	r0, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	440b      	add	r3, r1
 80015b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	e012      	b.n	80015ee <HAL_I2C_Init+0x18e>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e58      	subs	r0, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	0099      	lsls	r1, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	fbb0 f3f3 	udiv	r3, r0, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_Init+0x196>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e022      	b.n	800163c <HAL_I2C_Init+0x1dc>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10e      	bne.n	800161c <HAL_I2C_Init+0x1bc>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1e58      	subs	r0, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6859      	ldr	r1, [r3, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	440b      	add	r3, r1
 800160c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001610:	3301      	adds	r3, #1
 8001612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161a:	e00f      	b.n	800163c <HAL_I2C_Init+0x1dc>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	0099      	lsls	r1, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001632:	3301      	adds	r3, #1
 8001634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	6809      	ldr	r1, [r1, #0]
 8001640:	4313      	orrs	r3, r2
 8001642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69da      	ldr	r2, [r3, #28]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800166a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6911      	ldr	r1, [r2, #16]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68d2      	ldr	r2, [r2, #12]
 8001676:	4311      	orrs	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	430b      	orrs	r3, r1
 800167e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2220      	movs	r2, #32
 80016b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	000186a0 	.word	0x000186a0
 80016d8:	001e847f 	.word	0x001e847f
 80016dc:	003d08ff 	.word	0x003d08ff
 80016e0:	431bde83 	.word	0x431bde83
 80016e4:	10624dd3 	.word	0x10624dd3

080016e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	461a      	mov	r2, r3
 80016f4:	460b      	mov	r3, r1
 80016f6:	817b      	strh	r3, [r7, #10]
 80016f8:	4613      	mov	r3, r2
 80016fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016fc:	f7ff fc08 	bl	8000f10 <HAL_GetTick>
 8001700:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b20      	cmp	r3, #32
 800170c:	f040 80e0 	bne.w	80018d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2319      	movs	r3, #25
 8001716:	2201      	movs	r2, #1
 8001718:	4970      	ldr	r1, [pc, #448]	; (80018dc <HAL_I2C_Master_Transmit+0x1f4>)
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 f964 	bl	80019e8 <I2C_WaitOnFlagUntilTimeout>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001726:	2302      	movs	r3, #2
 8001728:	e0d3      	b.n	80018d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_I2C_Master_Transmit+0x50>
 8001734:	2302      	movs	r3, #2
 8001736:	e0cc      	b.n	80018d2 <HAL_I2C_Master_Transmit+0x1ea>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b01      	cmp	r3, #1
 800174c:	d007      	beq.n	800175e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0201 	orr.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800176c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2221      	movs	r2, #33	; 0x21
 8001772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2210      	movs	r2, #16
 800177a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	893a      	ldrh	r2, [r7, #8]
 800178e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4a50      	ldr	r2, [pc, #320]	; (80018e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017a0:	8979      	ldrh	r1, [r7, #10]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	6a3a      	ldr	r2, [r7, #32]
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f89c 	bl	80018e4 <I2C_MasterRequestWrite>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e08d      	b.n	80018d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017cc:	e066      	b.n	800189c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f9de 	bl	8001b94 <I2C_WaitOnTXEFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00d      	beq.n	80017fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d107      	bne.n	80017f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06b      	b.n	80018d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	781a      	ldrb	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001814:	b29b      	uxth	r3, r3
 8001816:	3b01      	subs	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001822:	3b01      	subs	r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b04      	cmp	r3, #4
 8001836:	d11b      	bne.n	8001870 <HAL_I2C_Master_Transmit+0x188>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183c:	2b00      	cmp	r3, #0
 800183e:	d017      	beq.n	8001870 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29b      	uxth	r3, r3
 800185c:	3b01      	subs	r3, #1
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001868:	3b01      	subs	r3, #1
 800186a:	b29a      	uxth	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	6a39      	ldr	r1, [r7, #32]
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 f9ce 	bl	8001c16 <I2C_WaitOnBTFFlagUntilTimeout>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00d      	beq.n	800189c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	2b04      	cmp	r3, #4
 8001886:	d107      	bne.n	8001898 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001896:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e01a      	b.n	80018d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d194      	bne.n	80017ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2220      	movs	r2, #32
 80018b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e000      	b.n	80018d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018d0:	2302      	movs	r3, #2
  }
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	00100002 	.word	0x00100002
 80018e0:	ffff0000 	.word	0xffff0000

080018e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	460b      	mov	r3, r1
 80018f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d006      	beq.n	800190e <I2C_MasterRequestWrite+0x2a>
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d003      	beq.n	800190e <I2C_MasterRequestWrite+0x2a>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800190c:	d108      	bne.n	8001920 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e00b      	b.n	8001938 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	2b12      	cmp	r3, #18
 8001926:	d107      	bne.n	8001938 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001936:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 f84f 	bl	80019e8 <I2C_WaitOnFlagUntilTimeout>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00d      	beq.n	800196c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800195e:	d103      	bne.n	8001968 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e035      	b.n	80019d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001974:	d108      	bne.n	8001988 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001976:	897b      	ldrh	r3, [r7, #10]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	e01b      	b.n	80019c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001988:	897b      	ldrh	r3, [r7, #10]
 800198a:	11db      	asrs	r3, r3, #7
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f003 0306 	and.w	r3, r3, #6
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f063 030f 	orn	r3, r3, #15
 8001998:	b2da      	uxtb	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	490e      	ldr	r1, [pc, #56]	; (80019e0 <I2C_MasterRequestWrite+0xfc>)
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f875 	bl	8001a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e010      	b.n	80019d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019b6:	897b      	ldrh	r3, [r7, #10]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <I2C_MasterRequestWrite+0x100>)
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f865 	bl	8001a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	00010008 	.word	0x00010008
 80019e4:	00010002 	.word	0x00010002

080019e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019f8:	e025      	b.n	8001a46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d021      	beq.n	8001a46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a02:	f7ff fa85 	bl	8000f10 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d302      	bcc.n	8001a18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d116      	bne.n	8001a46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2220      	movs	r2, #32
 8001a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f043 0220 	orr.w	r2, r3, #32
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e023      	b.n	8001a8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	0c1b      	lsrs	r3, r3, #16
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d10d      	bne.n	8001a6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	43da      	mvns	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf0c      	ite	eq
 8001a62:	2301      	moveq	r3, #1
 8001a64:	2300      	movne	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	e00c      	b.n	8001a86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4013      	ands	r3, r2
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bf0c      	ite	eq
 8001a7e:	2301      	moveq	r3, #1
 8001a80:	2300      	movne	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d0b6      	beq.n	80019fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001aa4:	e051      	b.n	8001b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab4:	d123      	bne.n	8001afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ace:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f043 0204 	orr.w	r2, r3, #4
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e046      	b.n	8001b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d021      	beq.n	8001b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b06:	f7ff fa03 	bl	8000f10 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d302      	bcc.n	8001b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d116      	bne.n	8001b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2220      	movs	r2, #32
 8001b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f043 0220 	orr.w	r2, r3, #32
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e020      	b.n	8001b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	0c1b      	lsrs	r3, r3, #16
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d10c      	bne.n	8001b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf14      	ite	ne
 8001b66:	2301      	movne	r3, #1
 8001b68:	2300      	moveq	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	e00b      	b.n	8001b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	43da      	mvns	r2, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf14      	ite	ne
 8001b80:	2301      	movne	r3, #1
 8001b82:	2300      	moveq	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d18d      	bne.n	8001aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ba0:	e02d      	b.n	8001bfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 f878 	bl	8001c98 <I2C_IsAcknowledgeFailed>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e02d      	b.n	8001c0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d021      	beq.n	8001bfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bba:	f7ff f9a9 	bl	8000f10 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d302      	bcc.n	8001bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d116      	bne.n	8001bfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f043 0220 	orr.w	r2, r3, #32
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e007      	b.n	8001c0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c08:	2b80      	cmp	r3, #128	; 0x80
 8001c0a:	d1ca      	bne.n	8001ba2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c22:	e02d      	b.n	8001c80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f837 	bl	8001c98 <I2C_IsAcknowledgeFailed>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e02d      	b.n	8001c90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3a:	d021      	beq.n	8001c80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3c:	f7ff f968 	bl	8000f10 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d302      	bcc.n	8001c52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d116      	bne.n	8001c80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f043 0220 	orr.w	r2, r3, #32
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e007      	b.n	8001c90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d1ca      	bne.n	8001c24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cae:	d11b      	bne.n	8001ce8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f043 0204 	orr.w	r2, r3, #4
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e128      	b.n	8001f5c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a90      	ldr	r2, [pc, #576]	; (8001f64 <HAL_I2S_Init+0x26c>)
 8001d22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7fe fe2b 	bl	8000980 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d40:	f023 030f 	bic.w	r3, r3, #15
 8001d44:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d060      	beq.n	8001e18 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d102      	bne.n	8001d64 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001d5e:	2310      	movs	r3, #16
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	e001      	b.n	8001d68 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001d64:	2320      	movs	r3, #32
 8001d66:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b20      	cmp	r3, #32
 8001d6e:	d802      	bhi.n	8001d76 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f001 faca 	bl	8003310 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d7c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d86:	d125      	bne.n	8001dd4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d010      	beq.n	8001db2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	461a      	mov	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	3305      	adds	r3, #5
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	e01f      	b.n	8001df2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	3305      	adds	r3, #5
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	e00e      	b.n	8001df2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	461a      	mov	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	3305      	adds	r3, #5
 8001df0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4a5c      	ldr	r2, [pc, #368]	; (8001f68 <HAL_I2S_Init+0x270>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	08db      	lsrs	r3, r3, #3
 8001dfc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	e003      	b.n	8001e20 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d902      	bls.n	8001e2c <HAL_I2S_Init+0x134>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	2bff      	cmp	r3, #255	; 0xff
 8001e2a:	d907      	bls.n	8001e3c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f043 0210 	orr.w	r2, r3, #16
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e08f      	b.n	8001f5c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	ea42 0103 	orr.w	r1, r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e5a:	f023 030f 	bic.w	r3, r3, #15
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6851      	ldr	r1, [r2, #4]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6892      	ldr	r2, [r2, #8]
 8001e66:	4311      	orrs	r1, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68d2      	ldr	r2, [r2, #12]
 8001e6c:	4311      	orrs	r1, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6992      	ldr	r2, [r2, #24]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e7e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d161      	bne.n	8001f4c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a38      	ldr	r2, [pc, #224]	; (8001f6c <HAL_I2S_Init+0x274>)
 8001e8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a37      	ldr	r2, [pc, #220]	; (8001f70 <HAL_I2S_Init+0x278>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d101      	bne.n	8001e9c <HAL_I2S_Init+0x1a4>
 8001e98:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_I2S_Init+0x27c>)
 8001e9a:	e001      	b.n	8001ea0 <HAL_I2S_Init+0x1a8>
 8001e9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	4932      	ldr	r1, [pc, #200]	; (8001f70 <HAL_I2S_Init+0x278>)
 8001ea8:	428a      	cmp	r2, r1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_I2S_Init+0x1b8>
 8001eac:	4a31      	ldr	r2, [pc, #196]	; (8001f74 <HAL_I2S_Init+0x27c>)
 8001eae:	e001      	b.n	8001eb4 <HAL_I2S_Init+0x1bc>
 8001eb0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001eb4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001eb8:	f023 030f 	bic.w	r3, r3, #15
 8001ebc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <HAL_I2S_Init+0x278>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d101      	bne.n	8001ecc <HAL_I2S_Init+0x1d4>
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_I2S_Init+0x27c>)
 8001eca:	e001      	b.n	8001ed0 <HAL_I2S_Init+0x1d8>
 8001ecc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <HAL_I2S_Init+0x278>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_I2S_Init+0x1ea>
 8001ede:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <HAL_I2S_Init+0x27c>)
 8001ee0:	e001      	b.n	8001ee6 <HAL_I2S_Init+0x1ee>
 8001ee2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef2:	d003      	beq.n	8001efc <HAL_I2S_Init+0x204>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d103      	bne.n	8001f04 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	e001      	b.n	8001f08 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f12:	4313      	orrs	r3, r2
 8001f14:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	897b      	ldrh	r3, [r7, #10]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f34:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <HAL_I2S_Init+0x278>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_I2S_Init+0x24c>
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_I2S_Init+0x27c>)
 8001f42:	e001      	b.n	8001f48 <HAL_I2S_Init+0x250>
 8001f44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f48:	897a      	ldrh	r2, [r7, #10]
 8001f4a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3720      	adds	r7, #32
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	08002251 	.word	0x08002251
 8001f68:	cccccccd 	.word	0xcccccccd
 8001f6c:	080023d9 	.word	0x080023d9
 8001f70:	40003800 	.word	0x40003800
 8001f74:	40003400 	.word	0x40003400

08001f78 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_I2S_Transmit+0x1c>
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0dc      	b.n	8002152 <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_I2S_Transmit+0x30>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e0d4      	b.n	8002152 <HAL_I2S_Transmit+0x1da>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d005      	beq.n	8001fc8 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e0c4      	b.n	8002152 <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d002      	beq.n	8001ff4 <HAL_I2S_Transmit+0x7c>
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d10a      	bne.n	800200a <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002008:	e005      	b.n	8002016 <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	88fa      	ldrh	r2, [r7, #6]
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	88fa      	ldrh	r2, [r7, #6]
 8002014:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202c:	d007      	beq.n	800203e <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800203c:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2201      	movs	r2, #1
 8002042:	2102      	movs	r1, #2
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f98d 	bl	8002364 <I2S_WaitFlagStateUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d04e      	beq.n	80020ee <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e070      	b.n	8002152 <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	881a      	ldrh	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	1c9a      	adds	r2, r3, #2
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	625a      	str	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2201      	movs	r2, #1
 8002098:	2102      	movs	r1, #2
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f962 	bl	8002364 <I2S_WaitFlagStateUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00f      	beq.n	80020c6 <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e045      	b.n	8002152 <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d10c      	bne.n	80020ee <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f043 0204 	orr.w	r2, r3, #4
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->TxXferCount > 0U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1bb      	bne.n	8002070 <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800210c:	d118      	bne.n	8002140 <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2200      	movs	r2, #0
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f925 	bl	8002364 <I2S_WaitFlagStateUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00f      	beq.n	8002140 <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	f043 0201 	orr.w	r2, r3, #1
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e008      	b.n	8002152 <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	881a      	ldrh	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	1c9a      	adds	r2, r3, #2
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10e      	bne.n	80021ea <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ffb8 	bl	800215a <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	b292      	uxth	r2, r2
 8002206:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	1c9a      	adds	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10e      	bne.n	8002248 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002238:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ff93 	bl	800216e <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b04      	cmp	r3, #4
 800226a:	d13a      	bne.n	80022e2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b01      	cmp	r3, #1
 8002274:	d109      	bne.n	800228a <I2S_IRQHandler+0x3a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002280:	2b40      	cmp	r3, #64	; 0x40
 8002282:	d102      	bne.n	800228a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ffb4 	bl	80021f2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002290:	2b40      	cmp	r3, #64	; 0x40
 8002292:	d126      	bne.n	80022e2 <I2S_IRQHandler+0x92>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d11f      	bne.n	80022e2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022b0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	f043 0202 	orr.w	r2, r3, #2
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff50 	bl	8002182 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d136      	bne.n	800235c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d109      	bne.n	800230c <I2S_IRQHandler+0xbc>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002302:	2b80      	cmp	r3, #128	; 0x80
 8002304:	d102      	bne.n	800230c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ff45 	bl	8002196 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b08      	cmp	r3, #8
 8002314:	d122      	bne.n	800235c <I2S_IRQHandler+0x10c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b20      	cmp	r3, #32
 8002322:	d11b      	bne.n	800235c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002332:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f043 0204 	orr.w	r2, r3, #4
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ff13 	bl	8002182 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800235c:	bf00      	nop
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002374:	f7fe fdcc 	bl	8000f10 <HAL_GetTick>
 8002378:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800237a:	e018      	b.n	80023ae <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002382:	d014      	beq.n	80023ae <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002384:	f7fe fdc4 	bl	8000f10 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d902      	bls.n	800239a <I2S_WaitFlagStateUntilTimeout+0x36>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e00f      	b.n	80023ce <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4013      	ands	r3, r2
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	bf0c      	ite	eq
 80023be:	2301      	moveq	r3, #1
 80023c0:	2300      	movne	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1d7      	bne.n	800237c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4aa2      	ldr	r2, [pc, #648]	; (8002678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80023f2:	4ba2      	ldr	r3, [pc, #648]	; (800267c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023f4:	e001      	b.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80023f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a9b      	ldr	r2, [pc, #620]	; (8002678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d101      	bne.n	8002414 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002410:	4b9a      	ldr	r3, [pc, #616]	; (800267c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002412:	e001      	b.n	8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002414:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002424:	d004      	beq.n	8002430 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f040 8099 	bne.w	8002562 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b02      	cmp	r3, #2
 8002438:	d107      	bne.n	800244a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f925 	bl	8002694 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d107      	bne.n	8002464 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f9c8 	bl	80027f4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	d13a      	bne.n	80024e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b00      	cmp	r3, #0
 8002476:	d035      	beq.n	80024e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a7e      	ldr	r2, [pc, #504]	; (8002678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002482:	4b7e      	ldr	r3, [pc, #504]	; (800267c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002484:	e001      	b.n	800248a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4979      	ldr	r1, [pc, #484]	; (8002678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002492:	428b      	cmp	r3, r1
 8002494:	d101      	bne.n	800249a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002496:	4b79      	ldr	r3, [pc, #484]	; (800267c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002498:	e001      	b.n	800249e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800249a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800249e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024a2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f043 0202 	orr.w	r2, r3, #2
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff fe4f 	bl	8002182 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	f040 80be 	bne.w	800266c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80b8 	beq.w	800266c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800250a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a59      	ldr	r2, [pc, #356]	; (8002678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d101      	bne.n	800251a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002516:	4b59      	ldr	r3, [pc, #356]	; (800267c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002518:	e001      	b.n	800251e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800251a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4954      	ldr	r1, [pc, #336]	; (8002678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002526:	428b      	cmp	r3, r1
 8002528:	d101      	bne.n	800252e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800252a:	4b54      	ldr	r3, [pc, #336]	; (800267c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800252c:	e001      	b.n	8002532 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800252e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002532:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002536:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f043 0204 	orr.w	r2, r3, #4
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fe11 	bl	8002182 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002560:	e084      	b.n	800266c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b02      	cmp	r3, #2
 800256a:	d107      	bne.n	800257c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f8be 	bl	80026f8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d107      	bne.n	8002596 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f8fd 	bl	8002790 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d12f      	bne.n	8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d02a      	beq.n	8002600 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025b8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a2e      	ldr	r2, [pc, #184]	; (8002678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d101      	bne.n	80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80025c6:	e001      	b.n	80025cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80025c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4929      	ldr	r1, [pc, #164]	; (8002678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025d4:	428b      	cmp	r3, r1
 80025d6:	d101      	bne.n	80025dc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80025da:	e001      	b.n	80025e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80025dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f043 0202 	orr.w	r2, r3, #2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fdc1 	bl	8002182 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b08      	cmp	r3, #8
 8002608:	d131      	bne.n	800266e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02c      	beq.n	800266e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a17      	ldr	r2, [pc, #92]	; (8002678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d101      	bne.n	8002622 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800261e:	4b17      	ldr	r3, [pc, #92]	; (800267c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002620:	e001      	b.n	8002626 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4912      	ldr	r1, [pc, #72]	; (8002678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800262e:	428b      	cmp	r3, r1
 8002630:	d101      	bne.n	8002636 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002634:	e001      	b.n	800263a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800263a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800263e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800264e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	f043 0204 	orr.w	r2, r3, #4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff fd8c 	bl	8002182 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800266a:	e000      	b.n	800266e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800266c:	bf00      	nop
}
 800266e:	bf00      	nop
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40003800 	.word	0x40003800
 800267c:	40003400 	.word	0x40003400

08002680 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	1c99      	adds	r1, r3, #2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6251      	str	r1, [r2, #36]	; 0x24
 80026a6:	881a      	ldrh	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d113      	bne.n	80026ee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d106      	bne.n	80026ee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ffc9 	bl	8002680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	1c99      	adds	r1, r3, #2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6251      	str	r1, [r2, #36]	; 0x24
 800270a:	8819      	ldrh	r1, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <I2SEx_TxISR_I2SExt+0x90>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <I2SEx_TxISR_I2SExt+0x22>
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <I2SEx_TxISR_I2SExt+0x94>)
 8002718:	e001      	b.n	800271e <I2SEx_TxISR_I2SExt+0x26>
 800271a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800271e:	460a      	mov	r2, r1
 8002720:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d121      	bne.n	800277e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <I2SEx_TxISR_I2SExt+0x90>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d101      	bne.n	8002748 <I2SEx_TxISR_I2SExt+0x50>
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <I2SEx_TxISR_I2SExt+0x94>)
 8002746:	e001      	b.n	800274c <I2SEx_TxISR_I2SExt+0x54>
 8002748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	490d      	ldr	r1, [pc, #52]	; (8002788 <I2SEx_TxISR_I2SExt+0x90>)
 8002754:	428b      	cmp	r3, r1
 8002756:	d101      	bne.n	800275c <I2SEx_TxISR_I2SExt+0x64>
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <I2SEx_TxISR_I2SExt+0x94>)
 800275a:	e001      	b.n	8002760 <I2SEx_TxISR_I2SExt+0x68>
 800275c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002760:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002764:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d106      	bne.n	800277e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff81 	bl	8002680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40003800 	.word	0x40003800
 800278c:	40003400 	.word	0x40003400

08002790 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68d8      	ldr	r0, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	1c99      	adds	r1, r3, #2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80027a8:	b282      	uxth	r2, r0
 80027aa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d113      	bne.n	80027ec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027d2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ff4a 	bl	8002680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a20      	ldr	r2, [pc, #128]	; (8002884 <I2SEx_RxISR_I2SExt+0x90>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <I2SEx_RxISR_I2SExt+0x16>
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <I2SEx_RxISR_I2SExt+0x94>)
 8002808:	e001      	b.n	800280e <I2SEx_RxISR_I2SExt+0x1a>
 800280a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800280e:	68d8      	ldr	r0, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	1c99      	adds	r1, r3, #2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	62d1      	str	r1, [r2, #44]	; 0x2c
 800281a:	b282      	uxth	r2, r0
 800281c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d121      	bne.n	800287a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <I2SEx_RxISR_I2SExt+0x90>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d101      	bne.n	8002844 <I2SEx_RxISR_I2SExt+0x50>
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <I2SEx_RxISR_I2SExt+0x94>)
 8002842:	e001      	b.n	8002848 <I2SEx_RxISR_I2SExt+0x54>
 8002844:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	490d      	ldr	r1, [pc, #52]	; (8002884 <I2SEx_RxISR_I2SExt+0x90>)
 8002850:	428b      	cmp	r3, r1
 8002852:	d101      	bne.n	8002858 <I2SEx_RxISR_I2SExt+0x64>
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <I2SEx_RxISR_I2SExt+0x94>)
 8002856:	e001      	b.n	800285c <I2SEx_RxISR_I2SExt+0x68>
 8002858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800285c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002860:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d106      	bne.n	800287a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff03 	bl	8002680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40003800 	.word	0x40003800
 8002888:	40003400 	.word	0x40003400

0800288c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e264      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d075      	beq.n	8002996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028aa:	4ba3      	ldr	r3, [pc, #652]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d00c      	beq.n	80028d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b6:	4ba0      	ldr	r3, [pc, #640]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d112      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c2:	4b9d      	ldr	r3, [pc, #628]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ce:	d10b      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d0:	4b99      	ldr	r3, [pc, #612]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d05b      	beq.n	8002994 <HAL_RCC_OscConfig+0x108>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d157      	bne.n	8002994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e23f      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_OscConfig+0x74>
 80028f2:	4b91      	ldr	r3, [pc, #580]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a90      	ldr	r2, [pc, #576]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e01d      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x98>
 800290a:	4b8b      	ldr	r3, [pc, #556]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a8a      	ldr	r2, [pc, #552]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b88      	ldr	r3, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a87      	ldr	r2, [pc, #540]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002924:	4b84      	ldr	r3, [pc, #528]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a83      	ldr	r2, [pc, #524]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b81      	ldr	r3, [pc, #516]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a80      	ldr	r2, [pc, #512]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7fe fae4 	bl	8000f10 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800294c:	f7fe fae0 	bl	8000f10 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e204      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b76      	ldr	r3, [pc, #472]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0xc0>
 800296a:	e014      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7fe fad0 	bl	8000f10 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002974:	f7fe facc 	bl	8000f10 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1f0      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	4b6c      	ldr	r3, [pc, #432]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0xe8>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d063      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029a2:	4b65      	ldr	r3, [pc, #404]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ae:	4b62      	ldr	r3, [pc, #392]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d11c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b5f      	ldr	r3, [pc, #380]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_RCC_OscConfig+0x152>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e1c4      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029de:	4b56      	ldr	r3, [pc, #344]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4952      	ldr	r1, [pc, #328]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	e03a      	b.n	8002a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fc:	4b4f      	ldr	r3, [pc, #316]	; (8002b3c <HAL_RCC_OscConfig+0x2b0>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7fe fa85 	bl	8000f10 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7fe fa81 	bl	8000f10 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1a5      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1c:	4b46      	ldr	r3, [pc, #280]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a28:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4940      	ldr	r1, [pc, #256]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]
 8002a3c:	e015      	b.n	8002a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3e:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <HAL_RCC_OscConfig+0x2b0>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fa64 	bl	8000f10 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7fe fa60 	bl	8000f10 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e184      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d030      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7e:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_RCC_OscConfig+0x2b4>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe fa44 	bl	8000f10 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7fe fa40 	bl	8000f10 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e164      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9e:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x200>
 8002aaa:	e015      	b.n	8002ad8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_RCC_OscConfig+0x2b4>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fa2d 	bl	8000f10 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aba:	f7fe fa29 	bl	8000f10 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e14d      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80a0 	beq.w	8002c26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b04:	6413      	str	r3, [r2, #64]	; 0x40
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b12:	2301      	movs	r3, #1
 8002b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_OscConfig+0x2b8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d121      	bne.n	8002b66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_RCC_OscConfig+0x2b8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_RCC_OscConfig+0x2b8>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe f9ef 	bl	8000f10 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	e011      	b.n	8002b5a <HAL_RCC_OscConfig+0x2ce>
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	42470000 	.word	0x42470000
 8002b40:	42470e80 	.word	0x42470e80
 8002b44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b48:	f7fe f9e2 	bl	8000f10 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e106      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	4b85      	ldr	r3, [pc, #532]	; (8002d70 <HAL_RCC_OscConfig+0x4e4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d106      	bne.n	8002b7c <HAL_RCC_OscConfig+0x2f0>
 8002b6e:	4b81      	ldr	r3, [pc, #516]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	4a80      	ldr	r2, [pc, #512]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7a:	e01c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x32a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	d10c      	bne.n	8002b9e <HAL_RCC_OscConfig+0x312>
 8002b84:	4b7b      	ldr	r3, [pc, #492]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a7a      	ldr	r2, [pc, #488]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002b8a:	f043 0304 	orr.w	r3, r3, #4
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	4b78      	ldr	r3, [pc, #480]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a77      	ldr	r2, [pc, #476]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9c:	e00b      	b.n	8002bb6 <HAL_RCC_OscConfig+0x32a>
 8002b9e:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a74      	ldr	r2, [pc, #464]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8002baa:	4b72      	ldr	r3, [pc, #456]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a71      	ldr	r2, [pc, #452]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d015      	beq.n	8002bea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbe:	f7fe f9a7 	bl	8000f10 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fe f9a3 	bl	8000f10 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e0c5      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ee      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x33a>
 8002be8:	e014      	b.n	8002c14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bea:	f7fe f991 	bl	8000f10 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fe f98d 	bl	8000f10 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e0af      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c08:	4b5a      	ldr	r3, [pc, #360]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ee      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d105      	bne.n	8002c26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1a:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	4a55      	ldr	r2, [pc, #340]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 809b 	beq.w	8002d66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d05c      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d141      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c44:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <HAL_RCC_OscConfig+0x4ec>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fe f961 	bl	8000f10 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fe f95d 	bl	8000f10 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e081      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c64:	4b43      	ldr	r3, [pc, #268]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f0      	bne.n	8002c52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69da      	ldr	r2, [r3, #28]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	019b      	lsls	r3, r3, #6
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	041b      	lsls	r3, r3, #16
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	061b      	lsls	r3, r3, #24
 8002c94:	4937      	ldr	r1, [pc, #220]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_RCC_OscConfig+0x4ec>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe f936 	bl	8000f10 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe f932 	bl	8000f10 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e056      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cba:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x41c>
 8002cc6:	e04e      	b.n	8002d66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_RCC_OscConfig+0x4ec>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cce:	f7fe f91f 	bl	8000f10 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7fe f91b 	bl	8000f10 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e03f      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce8:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f0      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x44a>
 8002cf4:	e037      	b.n	8002d66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e032      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d02:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <HAL_RCC_OscConfig+0x4e8>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d028      	beq.n	8002d62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d121      	bne.n	8002d62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d11a      	bne.n	8002d62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d32:	4013      	ands	r3, r2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d111      	bne.n	8002d62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d107      	bne.n	8002d62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40007000 	.word	0x40007000
 8002d74:	40023800 	.word	0x40023800
 8002d78:	42470060 	.word	0x42470060

08002d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0cc      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d90:	4b68      	ldr	r3, [pc, #416]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d90c      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b65      	ldr	r3, [pc, #404]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b63      	ldr	r3, [pc, #396]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0b8      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd0:	4b59      	ldr	r3, [pc, #356]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a58      	ldr	r2, [pc, #352]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de8:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a52      	ldr	r2, [pc, #328]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df4:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	494d      	ldr	r1, [pc, #308]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d044      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d119      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e07f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d003      	beq.n	8002e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3a:	4b3f      	ldr	r3, [pc, #252]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e06f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4a:	4b3b      	ldr	r3, [pc, #236]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e067      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5a:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f023 0203 	bic.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4934      	ldr	r1, [pc, #208]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e6c:	f7fe f850 	bl	8000f10 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e74:	f7fe f84c 	bl	8000f10 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e04f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 020c 	and.w	r2, r3, #12
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1eb      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d20c      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e032      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed0:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4916      	ldr	r1, [pc, #88]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	490e      	ldr	r1, [pc, #56]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f02:	f000 f821 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002f06:	4602      	mov	r2, r0
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	490a      	ldr	r1, [pc, #40]	; (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002f14:	5ccb      	ldrb	r3, [r1, r3]
 8002f16:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1a:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd ffb0 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023c00 	.word	0x40023c00
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	0800444c 	.word	0x0800444c
 8002f40:	20000000 	.word	0x20000000
 8002f44:	20000004 	.word	0x20000004

08002f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f60:	4b67      	ldr	r3, [pc, #412]	; (8003100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d00d      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x40>
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	f200 80bd 	bhi.w	80030ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x34>
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d003      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f7a:	e0b7      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f7c:	4b61      	ldr	r3, [pc, #388]	; (8003104 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f7e:	60bb      	str	r3, [r7, #8]
       break;
 8002f80:	e0b7      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f82:	4b61      	ldr	r3, [pc, #388]	; (8003108 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f84:	60bb      	str	r3, [r7, #8]
      break;
 8002f86:	e0b4      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f88:	4b5d      	ldr	r3, [pc, #372]	; (8003100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f92:	4b5b      	ldr	r3, [pc, #364]	; (8003100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d04d      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9e:	4b58      	ldr	r3, [pc, #352]	; (8003100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	099b      	lsrs	r3, r3, #6
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fae:	f04f 0100 	mov.w	r1, #0
 8002fb2:	ea02 0800 	and.w	r8, r2, r0
 8002fb6:	ea03 0901 	and.w	r9, r3, r1
 8002fba:	4640      	mov	r0, r8
 8002fbc:	4649      	mov	r1, r9
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	014b      	lsls	r3, r1, #5
 8002fc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fcc:	0142      	lsls	r2, r0, #5
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	ebb0 0008 	subs.w	r0, r0, r8
 8002fd6:	eb61 0109 	sbc.w	r1, r1, r9
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	018b      	lsls	r3, r1, #6
 8002fe4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fe8:	0182      	lsls	r2, r0, #6
 8002fea:	1a12      	subs	r2, r2, r0
 8002fec:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff0:	f04f 0000 	mov.w	r0, #0
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	00d9      	lsls	r1, r3, #3
 8002ffa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ffe:	00d0      	lsls	r0, r2, #3
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	eb12 0208 	adds.w	r2, r2, r8
 8003008:	eb43 0309 	adc.w	r3, r3, r9
 800300c:	f04f 0000 	mov.w	r0, #0
 8003010:	f04f 0100 	mov.w	r1, #0
 8003014:	0259      	lsls	r1, r3, #9
 8003016:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800301a:	0250      	lsls	r0, r2, #9
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	461a      	mov	r2, r3
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	f7fd f920 	bl	8000270 <__aeabi_uldivmod>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4613      	mov	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e04a      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303a:	4b31      	ldr	r3, [pc, #196]	; (8003100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	099b      	lsrs	r3, r3, #6
 8003040:	461a      	mov	r2, r3
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	f240 10ff 	movw	r0, #511	; 0x1ff
 800304a:	f04f 0100 	mov.w	r1, #0
 800304e:	ea02 0400 	and.w	r4, r2, r0
 8003052:	ea03 0501 	and.w	r5, r3, r1
 8003056:	4620      	mov	r0, r4
 8003058:	4629      	mov	r1, r5
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	014b      	lsls	r3, r1, #5
 8003064:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003068:	0142      	lsls	r2, r0, #5
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	1b00      	subs	r0, r0, r4
 8003070:	eb61 0105 	sbc.w	r1, r1, r5
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	018b      	lsls	r3, r1, #6
 800307e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003082:	0182      	lsls	r2, r0, #6
 8003084:	1a12      	subs	r2, r2, r0
 8003086:	eb63 0301 	sbc.w	r3, r3, r1
 800308a:	f04f 0000 	mov.w	r0, #0
 800308e:	f04f 0100 	mov.w	r1, #0
 8003092:	00d9      	lsls	r1, r3, #3
 8003094:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003098:	00d0      	lsls	r0, r2, #3
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	1912      	adds	r2, r2, r4
 80030a0:	eb45 0303 	adc.w	r3, r5, r3
 80030a4:	f04f 0000 	mov.w	r0, #0
 80030a8:	f04f 0100 	mov.w	r1, #0
 80030ac:	0299      	lsls	r1, r3, #10
 80030ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030b2:	0290      	lsls	r0, r2, #10
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	461a      	mov	r2, r3
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	f7fd f8d4 	bl	8000270 <__aeabi_uldivmod>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4613      	mov	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	0c1b      	lsrs	r3, r3, #16
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	3301      	adds	r3, #1
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	60bb      	str	r3, [r7, #8]
      break;
 80030ea:	e002      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030ee:	60bb      	str	r3, [r7, #8]
      break;
 80030f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f2:	68bb      	ldr	r3, [r7, #8]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800
 8003104:	00f42400 	.word	0x00f42400
 8003108:	007a1200 	.word	0x007a1200

0800310c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <HAL_RCC_GetHCLKFreq+0x14>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000000 	.word	0x20000000

08003124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003128:	f7ff fff0 	bl	800310c <HAL_RCC_GetHCLKFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	0a9b      	lsrs	r3, r3, #10
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	4903      	ldr	r1, [pc, #12]	; (8003148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800313a:	5ccb      	ldrb	r3, [r1, r3]
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40023800 	.word	0x40023800
 8003148:	0800445c 	.word	0x0800445c

0800314c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003170:	2b00      	cmp	r3, #0
 8003172:	d035      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003174:	4b62      	ldr	r3, [pc, #392]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800317a:	f7fd fec9 	bl	8000f10 <HAL_GetTick>
 800317e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003182:	f7fd fec5 	bl	8000f10 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0b0      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003194:	4b5b      	ldr	r3, [pc, #364]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f0      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	019a      	lsls	r2, r3, #6
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	071b      	lsls	r3, r3, #28
 80031ac:	4955      	ldr	r1, [pc, #340]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031b4:	4b52      	ldr	r3, [pc, #328]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031ba:	f7fd fea9 	bl	8000f10 <HAL_GetTick>
 80031be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031c2:	f7fd fea5 	bl	8000f10 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e090      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031d4:	4b4b      	ldr	r3, [pc, #300]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8083 	beq.w	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	4b44      	ldr	r3, [pc, #272]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	4a43      	ldr	r2, [pc, #268]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6413      	str	r3, [r2, #64]	; 0x40
 80031fe:	4b41      	ldr	r3, [pc, #260]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800320a:	4b3f      	ldr	r3, [pc, #252]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a3e      	ldr	r2, [pc, #248]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003216:	f7fd fe7b 	bl	8000f10 <HAL_GetTick>
 800321a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fd fe77 	bl	8000f10 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e062      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003230:	4b35      	ldr	r3, [pc, #212]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800323c:	4b31      	ldr	r3, [pc, #196]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003244:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d02f      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	429a      	cmp	r2, r3
 8003258:	d028      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800325a:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003262:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003264:	4b29      	ldr	r3, [pc, #164]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003270:	4a24      	ldr	r2, [pc, #144]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003276:	4b23      	ldr	r3, [pc, #140]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b01      	cmp	r3, #1
 8003280:	d114      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003282:	f7fd fe45 	bl	8000f10 <HAL_GetTick>
 8003286:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003288:	e00a      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fd fe41 	bl	8000f10 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e02a      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	4b18      	ldr	r3, [pc, #96]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ee      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032b8:	d10d      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80032ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ce:	490d      	ldr	r1, [pc, #52]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	608b      	str	r3, [r1, #8]
 80032d4:	e005      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80032e0:	6093      	str	r3, [r2, #8]
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ee:	4905      	ldr	r1, [pc, #20]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	42470068 	.word	0x42470068
 8003304:	40023800 	.word	0x40023800
 8003308:	40007000 	.word	0x40007000
 800330c:	42470e40 	.word	0x42470e40

08003310 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d13e      	bne.n	80033ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800332e:	4b23      	ldr	r3, [pc, #140]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d12f      	bne.n	80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003344:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003346:	617b      	str	r3, [r7, #20]
          break;
 8003348:	e02f      	b.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800334a:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003356:	d108      	bne.n	800336a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003358:	4b18      	ldr	r3, [pc, #96]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003360:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003362:	fbb2 f3f3 	udiv	r3, r2, r3
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	e007      	b.n	800337a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800336a:	4b14      	ldr	r3, [pc, #80]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003372:	4a15      	ldr	r2, [pc, #84]	; (80033c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800337c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	fb02 f303 	mul.w	r3, r2, r3
 800338c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003394:	0f1b      	lsrs	r3, r3, #28
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]
          break;
 80033a2:	e002      	b.n	80033aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
          break;
 80033a8:	bf00      	nop
        }
      }
      break;
 80033aa:	bf00      	nop
    }
  }
  return frequency;
 80033ac:	697b      	ldr	r3, [r7, #20]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	00bb8000 	.word	0x00bb8000
 80033c4:	007a1200 	.word	0x007a1200
 80033c8:	00f42400 	.word	0x00f42400

080033cc <__errno>:
 80033cc:	4b01      	ldr	r3, [pc, #4]	; (80033d4 <__errno+0x8>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	2000000c 	.word	0x2000000c

080033d8 <__libc_init_array>:
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	4d0d      	ldr	r5, [pc, #52]	; (8003410 <__libc_init_array+0x38>)
 80033dc:	4c0d      	ldr	r4, [pc, #52]	; (8003414 <__libc_init_array+0x3c>)
 80033de:	1b64      	subs	r4, r4, r5
 80033e0:	10a4      	asrs	r4, r4, #2
 80033e2:	2600      	movs	r6, #0
 80033e4:	42a6      	cmp	r6, r4
 80033e6:	d109      	bne.n	80033fc <__libc_init_array+0x24>
 80033e8:	4d0b      	ldr	r5, [pc, #44]	; (8003418 <__libc_init_array+0x40>)
 80033ea:	4c0c      	ldr	r4, [pc, #48]	; (800341c <__libc_init_array+0x44>)
 80033ec:	f001 f822 	bl	8004434 <_init>
 80033f0:	1b64      	subs	r4, r4, r5
 80033f2:	10a4      	asrs	r4, r4, #2
 80033f4:	2600      	movs	r6, #0
 80033f6:	42a6      	cmp	r6, r4
 80033f8:	d105      	bne.n	8003406 <__libc_init_array+0x2e>
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003400:	4798      	blx	r3
 8003402:	3601      	adds	r6, #1
 8003404:	e7ee      	b.n	80033e4 <__libc_init_array+0xc>
 8003406:	f855 3b04 	ldr.w	r3, [r5], #4
 800340a:	4798      	blx	r3
 800340c:	3601      	adds	r6, #1
 800340e:	e7f2      	b.n	80033f6 <__libc_init_array+0x1e>
 8003410:	080045b8 	.word	0x080045b8
 8003414:	080045b8 	.word	0x080045b8
 8003418:	080045b8 	.word	0x080045b8
 800341c:	080045bc 	.word	0x080045bc

08003420 <memset>:
 8003420:	4402      	add	r2, r0
 8003422:	4603      	mov	r3, r0
 8003424:	4293      	cmp	r3, r2
 8003426:	d100      	bne.n	800342a <memset+0xa>
 8003428:	4770      	bx	lr
 800342a:	f803 1b01 	strb.w	r1, [r3], #1
 800342e:	e7f9      	b.n	8003424 <memset+0x4>

08003430 <rand>:
 8003430:	4b17      	ldr	r3, [pc, #92]	; (8003490 <rand+0x60>)
 8003432:	b510      	push	{r4, lr}
 8003434:	681c      	ldr	r4, [r3, #0]
 8003436:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003438:	b9b3      	cbnz	r3, 8003468 <rand+0x38>
 800343a:	2018      	movs	r0, #24
 800343c:	f000 f868 	bl	8003510 <malloc>
 8003440:	63a0      	str	r0, [r4, #56]	; 0x38
 8003442:	b928      	cbnz	r0, 8003450 <rand+0x20>
 8003444:	4602      	mov	r2, r0
 8003446:	4b13      	ldr	r3, [pc, #76]	; (8003494 <rand+0x64>)
 8003448:	4813      	ldr	r0, [pc, #76]	; (8003498 <rand+0x68>)
 800344a:	214e      	movs	r1, #78	; 0x4e
 800344c:	f000 f830 	bl	80034b0 <__assert_func>
 8003450:	4a12      	ldr	r2, [pc, #72]	; (800349c <rand+0x6c>)
 8003452:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <rand+0x70>)
 8003454:	e9c0 2300 	strd	r2, r3, [r0]
 8003458:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <rand+0x74>)
 800345a:	6083      	str	r3, [r0, #8]
 800345c:	230b      	movs	r3, #11
 800345e:	8183      	strh	r3, [r0, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	2300      	movs	r3, #0
 8003464:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003468:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800346a:	480f      	ldr	r0, [pc, #60]	; (80034a8 <rand+0x78>)
 800346c:	690a      	ldr	r2, [r1, #16]
 800346e:	694b      	ldr	r3, [r1, #20]
 8003470:	4c0e      	ldr	r4, [pc, #56]	; (80034ac <rand+0x7c>)
 8003472:	4350      	muls	r0, r2
 8003474:	fb04 0003 	mla	r0, r4, r3, r0
 8003478:	fba2 3404 	umull	r3, r4, r2, r4
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	4404      	add	r4, r0
 8003480:	f144 0000 	adc.w	r0, r4, #0
 8003484:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8003488:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800348c:	bd10      	pop	{r4, pc}
 800348e:	bf00      	nop
 8003490:	2000000c 	.word	0x2000000c
 8003494:	08004468 	.word	0x08004468
 8003498:	0800447f 	.word	0x0800447f
 800349c:	abcd330e 	.word	0xabcd330e
 80034a0:	e66d1234 	.word	0xe66d1234
 80034a4:	0005deec 	.word	0x0005deec
 80034a8:	5851f42d 	.word	0x5851f42d
 80034ac:	4c957f2d 	.word	0x4c957f2d

080034b0 <__assert_func>:
 80034b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80034b2:	4614      	mov	r4, r2
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <__assert_func+0x2c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4605      	mov	r5, r0
 80034bc:	68d8      	ldr	r0, [r3, #12]
 80034be:	b14c      	cbz	r4, 80034d4 <__assert_func+0x24>
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <__assert_func+0x30>)
 80034c2:	9100      	str	r1, [sp, #0]
 80034c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80034c8:	4906      	ldr	r1, [pc, #24]	; (80034e4 <__assert_func+0x34>)
 80034ca:	462b      	mov	r3, r5
 80034cc:	f000 f80e 	bl	80034ec <fiprintf>
 80034d0:	f000 fc8e 	bl	8003df0 <abort>
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <__assert_func+0x38>)
 80034d6:	461c      	mov	r4, r3
 80034d8:	e7f3      	b.n	80034c2 <__assert_func+0x12>
 80034da:	bf00      	nop
 80034dc:	2000000c 	.word	0x2000000c
 80034e0:	080044de 	.word	0x080044de
 80034e4:	080044eb 	.word	0x080044eb
 80034e8:	08004519 	.word	0x08004519

080034ec <fiprintf>:
 80034ec:	b40e      	push	{r1, r2, r3}
 80034ee:	b503      	push	{r0, r1, lr}
 80034f0:	4601      	mov	r1, r0
 80034f2:	ab03      	add	r3, sp, #12
 80034f4:	4805      	ldr	r0, [pc, #20]	; (800350c <fiprintf+0x20>)
 80034f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80034fa:	6800      	ldr	r0, [r0, #0]
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	f000 f8e3 	bl	80036c8 <_vfiprintf_r>
 8003502:	b002      	add	sp, #8
 8003504:	f85d eb04 	ldr.w	lr, [sp], #4
 8003508:	b003      	add	sp, #12
 800350a:	4770      	bx	lr
 800350c:	2000000c 	.word	0x2000000c

08003510 <malloc>:
 8003510:	4b02      	ldr	r3, [pc, #8]	; (800351c <malloc+0xc>)
 8003512:	4601      	mov	r1, r0
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	f000 b853 	b.w	80035c0 <_malloc_r>
 800351a:	bf00      	nop
 800351c:	2000000c 	.word	0x2000000c

08003520 <_free_r>:
 8003520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003522:	2900      	cmp	r1, #0
 8003524:	d048      	beq.n	80035b8 <_free_r+0x98>
 8003526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800352a:	9001      	str	r0, [sp, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f1a1 0404 	sub.w	r4, r1, #4
 8003532:	bfb8      	it	lt
 8003534:	18e4      	addlt	r4, r4, r3
 8003536:	f000 fe81 	bl	800423c <__malloc_lock>
 800353a:	4a20      	ldr	r2, [pc, #128]	; (80035bc <_free_r+0x9c>)
 800353c:	9801      	ldr	r0, [sp, #4]
 800353e:	6813      	ldr	r3, [r2, #0]
 8003540:	4615      	mov	r5, r2
 8003542:	b933      	cbnz	r3, 8003552 <_free_r+0x32>
 8003544:	6063      	str	r3, [r4, #4]
 8003546:	6014      	str	r4, [r2, #0]
 8003548:	b003      	add	sp, #12
 800354a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800354e:	f000 be7b 	b.w	8004248 <__malloc_unlock>
 8003552:	42a3      	cmp	r3, r4
 8003554:	d90b      	bls.n	800356e <_free_r+0x4e>
 8003556:	6821      	ldr	r1, [r4, #0]
 8003558:	1862      	adds	r2, r4, r1
 800355a:	4293      	cmp	r3, r2
 800355c:	bf04      	itt	eq
 800355e:	681a      	ldreq	r2, [r3, #0]
 8003560:	685b      	ldreq	r3, [r3, #4]
 8003562:	6063      	str	r3, [r4, #4]
 8003564:	bf04      	itt	eq
 8003566:	1852      	addeq	r2, r2, r1
 8003568:	6022      	streq	r2, [r4, #0]
 800356a:	602c      	str	r4, [r5, #0]
 800356c:	e7ec      	b.n	8003548 <_free_r+0x28>
 800356e:	461a      	mov	r2, r3
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	b10b      	cbz	r3, 8003578 <_free_r+0x58>
 8003574:	42a3      	cmp	r3, r4
 8003576:	d9fa      	bls.n	800356e <_free_r+0x4e>
 8003578:	6811      	ldr	r1, [r2, #0]
 800357a:	1855      	adds	r5, r2, r1
 800357c:	42a5      	cmp	r5, r4
 800357e:	d10b      	bne.n	8003598 <_free_r+0x78>
 8003580:	6824      	ldr	r4, [r4, #0]
 8003582:	4421      	add	r1, r4
 8003584:	1854      	adds	r4, r2, r1
 8003586:	42a3      	cmp	r3, r4
 8003588:	6011      	str	r1, [r2, #0]
 800358a:	d1dd      	bne.n	8003548 <_free_r+0x28>
 800358c:	681c      	ldr	r4, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	6053      	str	r3, [r2, #4]
 8003592:	4421      	add	r1, r4
 8003594:	6011      	str	r1, [r2, #0]
 8003596:	e7d7      	b.n	8003548 <_free_r+0x28>
 8003598:	d902      	bls.n	80035a0 <_free_r+0x80>
 800359a:	230c      	movs	r3, #12
 800359c:	6003      	str	r3, [r0, #0]
 800359e:	e7d3      	b.n	8003548 <_free_r+0x28>
 80035a0:	6825      	ldr	r5, [r4, #0]
 80035a2:	1961      	adds	r1, r4, r5
 80035a4:	428b      	cmp	r3, r1
 80035a6:	bf04      	itt	eq
 80035a8:	6819      	ldreq	r1, [r3, #0]
 80035aa:	685b      	ldreq	r3, [r3, #4]
 80035ac:	6063      	str	r3, [r4, #4]
 80035ae:	bf04      	itt	eq
 80035b0:	1949      	addeq	r1, r1, r5
 80035b2:	6021      	streq	r1, [r4, #0]
 80035b4:	6054      	str	r4, [r2, #4]
 80035b6:	e7c7      	b.n	8003548 <_free_r+0x28>
 80035b8:	b003      	add	sp, #12
 80035ba:	bd30      	pop	{r4, r5, pc}
 80035bc:	20000090 	.word	0x20000090

080035c0 <_malloc_r>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	1ccd      	adds	r5, r1, #3
 80035c4:	f025 0503 	bic.w	r5, r5, #3
 80035c8:	3508      	adds	r5, #8
 80035ca:	2d0c      	cmp	r5, #12
 80035cc:	bf38      	it	cc
 80035ce:	250c      	movcc	r5, #12
 80035d0:	2d00      	cmp	r5, #0
 80035d2:	4606      	mov	r6, r0
 80035d4:	db01      	blt.n	80035da <_malloc_r+0x1a>
 80035d6:	42a9      	cmp	r1, r5
 80035d8:	d903      	bls.n	80035e2 <_malloc_r+0x22>
 80035da:	230c      	movs	r3, #12
 80035dc:	6033      	str	r3, [r6, #0]
 80035de:	2000      	movs	r0, #0
 80035e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e2:	f000 fe2b 	bl	800423c <__malloc_lock>
 80035e6:	4921      	ldr	r1, [pc, #132]	; (800366c <_malloc_r+0xac>)
 80035e8:	680a      	ldr	r2, [r1, #0]
 80035ea:	4614      	mov	r4, r2
 80035ec:	b99c      	cbnz	r4, 8003616 <_malloc_r+0x56>
 80035ee:	4f20      	ldr	r7, [pc, #128]	; (8003670 <_malloc_r+0xb0>)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	b923      	cbnz	r3, 80035fe <_malloc_r+0x3e>
 80035f4:	4621      	mov	r1, r4
 80035f6:	4630      	mov	r0, r6
 80035f8:	f000 fb2a 	bl	8003c50 <_sbrk_r>
 80035fc:	6038      	str	r0, [r7, #0]
 80035fe:	4629      	mov	r1, r5
 8003600:	4630      	mov	r0, r6
 8003602:	f000 fb25 	bl	8003c50 <_sbrk_r>
 8003606:	1c43      	adds	r3, r0, #1
 8003608:	d123      	bne.n	8003652 <_malloc_r+0x92>
 800360a:	230c      	movs	r3, #12
 800360c:	6033      	str	r3, [r6, #0]
 800360e:	4630      	mov	r0, r6
 8003610:	f000 fe1a 	bl	8004248 <__malloc_unlock>
 8003614:	e7e3      	b.n	80035de <_malloc_r+0x1e>
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	1b5b      	subs	r3, r3, r5
 800361a:	d417      	bmi.n	800364c <_malloc_r+0x8c>
 800361c:	2b0b      	cmp	r3, #11
 800361e:	d903      	bls.n	8003628 <_malloc_r+0x68>
 8003620:	6023      	str	r3, [r4, #0]
 8003622:	441c      	add	r4, r3
 8003624:	6025      	str	r5, [r4, #0]
 8003626:	e004      	b.n	8003632 <_malloc_r+0x72>
 8003628:	6863      	ldr	r3, [r4, #4]
 800362a:	42a2      	cmp	r2, r4
 800362c:	bf0c      	ite	eq
 800362e:	600b      	streq	r3, [r1, #0]
 8003630:	6053      	strne	r3, [r2, #4]
 8003632:	4630      	mov	r0, r6
 8003634:	f000 fe08 	bl	8004248 <__malloc_unlock>
 8003638:	f104 000b 	add.w	r0, r4, #11
 800363c:	1d23      	adds	r3, r4, #4
 800363e:	f020 0007 	bic.w	r0, r0, #7
 8003642:	1ac2      	subs	r2, r0, r3
 8003644:	d0cc      	beq.n	80035e0 <_malloc_r+0x20>
 8003646:	1a1b      	subs	r3, r3, r0
 8003648:	50a3      	str	r3, [r4, r2]
 800364a:	e7c9      	b.n	80035e0 <_malloc_r+0x20>
 800364c:	4622      	mov	r2, r4
 800364e:	6864      	ldr	r4, [r4, #4]
 8003650:	e7cc      	b.n	80035ec <_malloc_r+0x2c>
 8003652:	1cc4      	adds	r4, r0, #3
 8003654:	f024 0403 	bic.w	r4, r4, #3
 8003658:	42a0      	cmp	r0, r4
 800365a:	d0e3      	beq.n	8003624 <_malloc_r+0x64>
 800365c:	1a21      	subs	r1, r4, r0
 800365e:	4630      	mov	r0, r6
 8003660:	f000 faf6 	bl	8003c50 <_sbrk_r>
 8003664:	3001      	adds	r0, #1
 8003666:	d1dd      	bne.n	8003624 <_malloc_r+0x64>
 8003668:	e7cf      	b.n	800360a <_malloc_r+0x4a>
 800366a:	bf00      	nop
 800366c:	20000090 	.word	0x20000090
 8003670:	20000094 	.word	0x20000094

08003674 <__sfputc_r>:
 8003674:	6893      	ldr	r3, [r2, #8]
 8003676:	3b01      	subs	r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	b410      	push	{r4}
 800367c:	6093      	str	r3, [r2, #8]
 800367e:	da08      	bge.n	8003692 <__sfputc_r+0x1e>
 8003680:	6994      	ldr	r4, [r2, #24]
 8003682:	42a3      	cmp	r3, r4
 8003684:	db01      	blt.n	800368a <__sfputc_r+0x16>
 8003686:	290a      	cmp	r1, #10
 8003688:	d103      	bne.n	8003692 <__sfputc_r+0x1e>
 800368a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800368e:	f000 baef 	b.w	8003c70 <__swbuf_r>
 8003692:	6813      	ldr	r3, [r2, #0]
 8003694:	1c58      	adds	r0, r3, #1
 8003696:	6010      	str	r0, [r2, #0]
 8003698:	7019      	strb	r1, [r3, #0]
 800369a:	4608      	mov	r0, r1
 800369c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <__sfputs_r>:
 80036a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a4:	4606      	mov	r6, r0
 80036a6:	460f      	mov	r7, r1
 80036a8:	4614      	mov	r4, r2
 80036aa:	18d5      	adds	r5, r2, r3
 80036ac:	42ac      	cmp	r4, r5
 80036ae:	d101      	bne.n	80036b4 <__sfputs_r+0x12>
 80036b0:	2000      	movs	r0, #0
 80036b2:	e007      	b.n	80036c4 <__sfputs_r+0x22>
 80036b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036b8:	463a      	mov	r2, r7
 80036ba:	4630      	mov	r0, r6
 80036bc:	f7ff ffda 	bl	8003674 <__sfputc_r>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d1f3      	bne.n	80036ac <__sfputs_r+0xa>
 80036c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036c8 <_vfiprintf_r>:
 80036c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036cc:	460d      	mov	r5, r1
 80036ce:	b09d      	sub	sp, #116	; 0x74
 80036d0:	4614      	mov	r4, r2
 80036d2:	4698      	mov	r8, r3
 80036d4:	4606      	mov	r6, r0
 80036d6:	b118      	cbz	r0, 80036e0 <_vfiprintf_r+0x18>
 80036d8:	6983      	ldr	r3, [r0, #24]
 80036da:	b90b      	cbnz	r3, 80036e0 <_vfiprintf_r+0x18>
 80036dc:	f000 fcaa 	bl	8004034 <__sinit>
 80036e0:	4b89      	ldr	r3, [pc, #548]	; (8003908 <_vfiprintf_r+0x240>)
 80036e2:	429d      	cmp	r5, r3
 80036e4:	d11b      	bne.n	800371e <_vfiprintf_r+0x56>
 80036e6:	6875      	ldr	r5, [r6, #4]
 80036e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036ea:	07d9      	lsls	r1, r3, #31
 80036ec:	d405      	bmi.n	80036fa <_vfiprintf_r+0x32>
 80036ee:	89ab      	ldrh	r3, [r5, #12]
 80036f0:	059a      	lsls	r2, r3, #22
 80036f2:	d402      	bmi.n	80036fa <_vfiprintf_r+0x32>
 80036f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036f6:	f000 fd3b 	bl	8004170 <__retarget_lock_acquire_recursive>
 80036fa:	89ab      	ldrh	r3, [r5, #12]
 80036fc:	071b      	lsls	r3, r3, #28
 80036fe:	d501      	bpl.n	8003704 <_vfiprintf_r+0x3c>
 8003700:	692b      	ldr	r3, [r5, #16]
 8003702:	b9eb      	cbnz	r3, 8003740 <_vfiprintf_r+0x78>
 8003704:	4629      	mov	r1, r5
 8003706:	4630      	mov	r0, r6
 8003708:	f000 fb04 	bl	8003d14 <__swsetup_r>
 800370c:	b1c0      	cbz	r0, 8003740 <_vfiprintf_r+0x78>
 800370e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003710:	07dc      	lsls	r4, r3, #31
 8003712:	d50e      	bpl.n	8003732 <_vfiprintf_r+0x6a>
 8003714:	f04f 30ff 	mov.w	r0, #4294967295
 8003718:	b01d      	add	sp, #116	; 0x74
 800371a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800371e:	4b7b      	ldr	r3, [pc, #492]	; (800390c <_vfiprintf_r+0x244>)
 8003720:	429d      	cmp	r5, r3
 8003722:	d101      	bne.n	8003728 <_vfiprintf_r+0x60>
 8003724:	68b5      	ldr	r5, [r6, #8]
 8003726:	e7df      	b.n	80036e8 <_vfiprintf_r+0x20>
 8003728:	4b79      	ldr	r3, [pc, #484]	; (8003910 <_vfiprintf_r+0x248>)
 800372a:	429d      	cmp	r5, r3
 800372c:	bf08      	it	eq
 800372e:	68f5      	ldreq	r5, [r6, #12]
 8003730:	e7da      	b.n	80036e8 <_vfiprintf_r+0x20>
 8003732:	89ab      	ldrh	r3, [r5, #12]
 8003734:	0598      	lsls	r0, r3, #22
 8003736:	d4ed      	bmi.n	8003714 <_vfiprintf_r+0x4c>
 8003738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800373a:	f000 fd1a 	bl	8004172 <__retarget_lock_release_recursive>
 800373e:	e7e9      	b.n	8003714 <_vfiprintf_r+0x4c>
 8003740:	2300      	movs	r3, #0
 8003742:	9309      	str	r3, [sp, #36]	; 0x24
 8003744:	2320      	movs	r3, #32
 8003746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800374a:	f8cd 800c 	str.w	r8, [sp, #12]
 800374e:	2330      	movs	r3, #48	; 0x30
 8003750:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003914 <_vfiprintf_r+0x24c>
 8003754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003758:	f04f 0901 	mov.w	r9, #1
 800375c:	4623      	mov	r3, r4
 800375e:	469a      	mov	sl, r3
 8003760:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003764:	b10a      	cbz	r2, 800376a <_vfiprintf_r+0xa2>
 8003766:	2a25      	cmp	r2, #37	; 0x25
 8003768:	d1f9      	bne.n	800375e <_vfiprintf_r+0x96>
 800376a:	ebba 0b04 	subs.w	fp, sl, r4
 800376e:	d00b      	beq.n	8003788 <_vfiprintf_r+0xc0>
 8003770:	465b      	mov	r3, fp
 8003772:	4622      	mov	r2, r4
 8003774:	4629      	mov	r1, r5
 8003776:	4630      	mov	r0, r6
 8003778:	f7ff ff93 	bl	80036a2 <__sfputs_r>
 800377c:	3001      	adds	r0, #1
 800377e:	f000 80aa 	beq.w	80038d6 <_vfiprintf_r+0x20e>
 8003782:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003784:	445a      	add	r2, fp
 8003786:	9209      	str	r2, [sp, #36]	; 0x24
 8003788:	f89a 3000 	ldrb.w	r3, [sl]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80a2 	beq.w	80038d6 <_vfiprintf_r+0x20e>
 8003792:	2300      	movs	r3, #0
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800379c:	f10a 0a01 	add.w	sl, sl, #1
 80037a0:	9304      	str	r3, [sp, #16]
 80037a2:	9307      	str	r3, [sp, #28]
 80037a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037a8:	931a      	str	r3, [sp, #104]	; 0x68
 80037aa:	4654      	mov	r4, sl
 80037ac:	2205      	movs	r2, #5
 80037ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b2:	4858      	ldr	r0, [pc, #352]	; (8003914 <_vfiprintf_r+0x24c>)
 80037b4:	f7fc fd0c 	bl	80001d0 <memchr>
 80037b8:	9a04      	ldr	r2, [sp, #16]
 80037ba:	b9d8      	cbnz	r0, 80037f4 <_vfiprintf_r+0x12c>
 80037bc:	06d1      	lsls	r1, r2, #27
 80037be:	bf44      	itt	mi
 80037c0:	2320      	movmi	r3, #32
 80037c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037c6:	0713      	lsls	r3, r2, #28
 80037c8:	bf44      	itt	mi
 80037ca:	232b      	movmi	r3, #43	; 0x2b
 80037cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037d0:	f89a 3000 	ldrb.w	r3, [sl]
 80037d4:	2b2a      	cmp	r3, #42	; 0x2a
 80037d6:	d015      	beq.n	8003804 <_vfiprintf_r+0x13c>
 80037d8:	9a07      	ldr	r2, [sp, #28]
 80037da:	4654      	mov	r4, sl
 80037dc:	2000      	movs	r0, #0
 80037de:	f04f 0c0a 	mov.w	ip, #10
 80037e2:	4621      	mov	r1, r4
 80037e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037e8:	3b30      	subs	r3, #48	; 0x30
 80037ea:	2b09      	cmp	r3, #9
 80037ec:	d94e      	bls.n	800388c <_vfiprintf_r+0x1c4>
 80037ee:	b1b0      	cbz	r0, 800381e <_vfiprintf_r+0x156>
 80037f0:	9207      	str	r2, [sp, #28]
 80037f2:	e014      	b.n	800381e <_vfiprintf_r+0x156>
 80037f4:	eba0 0308 	sub.w	r3, r0, r8
 80037f8:	fa09 f303 	lsl.w	r3, r9, r3
 80037fc:	4313      	orrs	r3, r2
 80037fe:	9304      	str	r3, [sp, #16]
 8003800:	46a2      	mov	sl, r4
 8003802:	e7d2      	b.n	80037aa <_vfiprintf_r+0xe2>
 8003804:	9b03      	ldr	r3, [sp, #12]
 8003806:	1d19      	adds	r1, r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	9103      	str	r1, [sp, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	bfbb      	ittet	lt
 8003810:	425b      	neglt	r3, r3
 8003812:	f042 0202 	orrlt.w	r2, r2, #2
 8003816:	9307      	strge	r3, [sp, #28]
 8003818:	9307      	strlt	r3, [sp, #28]
 800381a:	bfb8      	it	lt
 800381c:	9204      	strlt	r2, [sp, #16]
 800381e:	7823      	ldrb	r3, [r4, #0]
 8003820:	2b2e      	cmp	r3, #46	; 0x2e
 8003822:	d10c      	bne.n	800383e <_vfiprintf_r+0x176>
 8003824:	7863      	ldrb	r3, [r4, #1]
 8003826:	2b2a      	cmp	r3, #42	; 0x2a
 8003828:	d135      	bne.n	8003896 <_vfiprintf_r+0x1ce>
 800382a:	9b03      	ldr	r3, [sp, #12]
 800382c:	1d1a      	adds	r2, r3, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	9203      	str	r2, [sp, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	bfb8      	it	lt
 8003836:	f04f 33ff 	movlt.w	r3, #4294967295
 800383a:	3402      	adds	r4, #2
 800383c:	9305      	str	r3, [sp, #20]
 800383e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003924 <_vfiprintf_r+0x25c>
 8003842:	7821      	ldrb	r1, [r4, #0]
 8003844:	2203      	movs	r2, #3
 8003846:	4650      	mov	r0, sl
 8003848:	f7fc fcc2 	bl	80001d0 <memchr>
 800384c:	b140      	cbz	r0, 8003860 <_vfiprintf_r+0x198>
 800384e:	2340      	movs	r3, #64	; 0x40
 8003850:	eba0 000a 	sub.w	r0, r0, sl
 8003854:	fa03 f000 	lsl.w	r0, r3, r0
 8003858:	9b04      	ldr	r3, [sp, #16]
 800385a:	4303      	orrs	r3, r0
 800385c:	3401      	adds	r4, #1
 800385e:	9304      	str	r3, [sp, #16]
 8003860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003864:	482c      	ldr	r0, [pc, #176]	; (8003918 <_vfiprintf_r+0x250>)
 8003866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800386a:	2206      	movs	r2, #6
 800386c:	f7fc fcb0 	bl	80001d0 <memchr>
 8003870:	2800      	cmp	r0, #0
 8003872:	d03f      	beq.n	80038f4 <_vfiprintf_r+0x22c>
 8003874:	4b29      	ldr	r3, [pc, #164]	; (800391c <_vfiprintf_r+0x254>)
 8003876:	bb1b      	cbnz	r3, 80038c0 <_vfiprintf_r+0x1f8>
 8003878:	9b03      	ldr	r3, [sp, #12]
 800387a:	3307      	adds	r3, #7
 800387c:	f023 0307 	bic.w	r3, r3, #7
 8003880:	3308      	adds	r3, #8
 8003882:	9303      	str	r3, [sp, #12]
 8003884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003886:	443b      	add	r3, r7
 8003888:	9309      	str	r3, [sp, #36]	; 0x24
 800388a:	e767      	b.n	800375c <_vfiprintf_r+0x94>
 800388c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003890:	460c      	mov	r4, r1
 8003892:	2001      	movs	r0, #1
 8003894:	e7a5      	b.n	80037e2 <_vfiprintf_r+0x11a>
 8003896:	2300      	movs	r3, #0
 8003898:	3401      	adds	r4, #1
 800389a:	9305      	str	r3, [sp, #20]
 800389c:	4619      	mov	r1, r3
 800389e:	f04f 0c0a 	mov.w	ip, #10
 80038a2:	4620      	mov	r0, r4
 80038a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038a8:	3a30      	subs	r2, #48	; 0x30
 80038aa:	2a09      	cmp	r2, #9
 80038ac:	d903      	bls.n	80038b6 <_vfiprintf_r+0x1ee>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0c5      	beq.n	800383e <_vfiprintf_r+0x176>
 80038b2:	9105      	str	r1, [sp, #20]
 80038b4:	e7c3      	b.n	800383e <_vfiprintf_r+0x176>
 80038b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80038ba:	4604      	mov	r4, r0
 80038bc:	2301      	movs	r3, #1
 80038be:	e7f0      	b.n	80038a2 <_vfiprintf_r+0x1da>
 80038c0:	ab03      	add	r3, sp, #12
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	462a      	mov	r2, r5
 80038c6:	4b16      	ldr	r3, [pc, #88]	; (8003920 <_vfiprintf_r+0x258>)
 80038c8:	a904      	add	r1, sp, #16
 80038ca:	4630      	mov	r0, r6
 80038cc:	f3af 8000 	nop.w
 80038d0:	4607      	mov	r7, r0
 80038d2:	1c78      	adds	r0, r7, #1
 80038d4:	d1d6      	bne.n	8003884 <_vfiprintf_r+0x1bc>
 80038d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038d8:	07d9      	lsls	r1, r3, #31
 80038da:	d405      	bmi.n	80038e8 <_vfiprintf_r+0x220>
 80038dc:	89ab      	ldrh	r3, [r5, #12]
 80038de:	059a      	lsls	r2, r3, #22
 80038e0:	d402      	bmi.n	80038e8 <_vfiprintf_r+0x220>
 80038e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038e4:	f000 fc45 	bl	8004172 <__retarget_lock_release_recursive>
 80038e8:	89ab      	ldrh	r3, [r5, #12]
 80038ea:	065b      	lsls	r3, r3, #25
 80038ec:	f53f af12 	bmi.w	8003714 <_vfiprintf_r+0x4c>
 80038f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038f2:	e711      	b.n	8003718 <_vfiprintf_r+0x50>
 80038f4:	ab03      	add	r3, sp, #12
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	462a      	mov	r2, r5
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <_vfiprintf_r+0x258>)
 80038fc:	a904      	add	r1, sp, #16
 80038fe:	4630      	mov	r0, r6
 8003900:	f000 f880 	bl	8003a04 <_printf_i>
 8003904:	e7e4      	b.n	80038d0 <_vfiprintf_r+0x208>
 8003906:	bf00      	nop
 8003908:	08004570 	.word	0x08004570
 800390c:	08004590 	.word	0x08004590
 8003910:	08004550 	.word	0x08004550
 8003914:	0800451a 	.word	0x0800451a
 8003918:	08004524 	.word	0x08004524
 800391c:	00000000 	.word	0x00000000
 8003920:	080036a3 	.word	0x080036a3
 8003924:	08004520 	.word	0x08004520

08003928 <_printf_common>:
 8003928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800392c:	4616      	mov	r6, r2
 800392e:	4699      	mov	r9, r3
 8003930:	688a      	ldr	r2, [r1, #8]
 8003932:	690b      	ldr	r3, [r1, #16]
 8003934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003938:	4293      	cmp	r3, r2
 800393a:	bfb8      	it	lt
 800393c:	4613      	movlt	r3, r2
 800393e:	6033      	str	r3, [r6, #0]
 8003940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003944:	4607      	mov	r7, r0
 8003946:	460c      	mov	r4, r1
 8003948:	b10a      	cbz	r2, 800394e <_printf_common+0x26>
 800394a:	3301      	adds	r3, #1
 800394c:	6033      	str	r3, [r6, #0]
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	0699      	lsls	r1, r3, #26
 8003952:	bf42      	ittt	mi
 8003954:	6833      	ldrmi	r3, [r6, #0]
 8003956:	3302      	addmi	r3, #2
 8003958:	6033      	strmi	r3, [r6, #0]
 800395a:	6825      	ldr	r5, [r4, #0]
 800395c:	f015 0506 	ands.w	r5, r5, #6
 8003960:	d106      	bne.n	8003970 <_printf_common+0x48>
 8003962:	f104 0a19 	add.w	sl, r4, #25
 8003966:	68e3      	ldr	r3, [r4, #12]
 8003968:	6832      	ldr	r2, [r6, #0]
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	42ab      	cmp	r3, r5
 800396e:	dc26      	bgt.n	80039be <_printf_common+0x96>
 8003970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003974:	1e13      	subs	r3, r2, #0
 8003976:	6822      	ldr	r2, [r4, #0]
 8003978:	bf18      	it	ne
 800397a:	2301      	movne	r3, #1
 800397c:	0692      	lsls	r2, r2, #26
 800397e:	d42b      	bmi.n	80039d8 <_printf_common+0xb0>
 8003980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003984:	4649      	mov	r1, r9
 8003986:	4638      	mov	r0, r7
 8003988:	47c0      	blx	r8
 800398a:	3001      	adds	r0, #1
 800398c:	d01e      	beq.n	80039cc <_printf_common+0xa4>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	68e5      	ldr	r5, [r4, #12]
 8003992:	6832      	ldr	r2, [r6, #0]
 8003994:	f003 0306 	and.w	r3, r3, #6
 8003998:	2b04      	cmp	r3, #4
 800399a:	bf08      	it	eq
 800399c:	1aad      	subeq	r5, r5, r2
 800399e:	68a3      	ldr	r3, [r4, #8]
 80039a0:	6922      	ldr	r2, [r4, #16]
 80039a2:	bf0c      	ite	eq
 80039a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039a8:	2500      	movne	r5, #0
 80039aa:	4293      	cmp	r3, r2
 80039ac:	bfc4      	itt	gt
 80039ae:	1a9b      	subgt	r3, r3, r2
 80039b0:	18ed      	addgt	r5, r5, r3
 80039b2:	2600      	movs	r6, #0
 80039b4:	341a      	adds	r4, #26
 80039b6:	42b5      	cmp	r5, r6
 80039b8:	d11a      	bne.n	80039f0 <_printf_common+0xc8>
 80039ba:	2000      	movs	r0, #0
 80039bc:	e008      	b.n	80039d0 <_printf_common+0xa8>
 80039be:	2301      	movs	r3, #1
 80039c0:	4652      	mov	r2, sl
 80039c2:	4649      	mov	r1, r9
 80039c4:	4638      	mov	r0, r7
 80039c6:	47c0      	blx	r8
 80039c8:	3001      	adds	r0, #1
 80039ca:	d103      	bne.n	80039d4 <_printf_common+0xac>
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295
 80039d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d4:	3501      	adds	r5, #1
 80039d6:	e7c6      	b.n	8003966 <_printf_common+0x3e>
 80039d8:	18e1      	adds	r1, r4, r3
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	2030      	movs	r0, #48	; 0x30
 80039de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039e2:	4422      	add	r2, r4
 80039e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039ec:	3302      	adds	r3, #2
 80039ee:	e7c7      	b.n	8003980 <_printf_common+0x58>
 80039f0:	2301      	movs	r3, #1
 80039f2:	4622      	mov	r2, r4
 80039f4:	4649      	mov	r1, r9
 80039f6:	4638      	mov	r0, r7
 80039f8:	47c0      	blx	r8
 80039fa:	3001      	adds	r0, #1
 80039fc:	d0e6      	beq.n	80039cc <_printf_common+0xa4>
 80039fe:	3601      	adds	r6, #1
 8003a00:	e7d9      	b.n	80039b6 <_printf_common+0x8e>
	...

08003a04 <_printf_i>:
 8003a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a08:	460c      	mov	r4, r1
 8003a0a:	4691      	mov	r9, r2
 8003a0c:	7e27      	ldrb	r7, [r4, #24]
 8003a0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a10:	2f78      	cmp	r7, #120	; 0x78
 8003a12:	4680      	mov	r8, r0
 8003a14:	469a      	mov	sl, r3
 8003a16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a1a:	d807      	bhi.n	8003a2c <_printf_i+0x28>
 8003a1c:	2f62      	cmp	r7, #98	; 0x62
 8003a1e:	d80a      	bhi.n	8003a36 <_printf_i+0x32>
 8003a20:	2f00      	cmp	r7, #0
 8003a22:	f000 80d8 	beq.w	8003bd6 <_printf_i+0x1d2>
 8003a26:	2f58      	cmp	r7, #88	; 0x58
 8003a28:	f000 80a3 	beq.w	8003b72 <_printf_i+0x16e>
 8003a2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a34:	e03a      	b.n	8003aac <_printf_i+0xa8>
 8003a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a3a:	2b15      	cmp	r3, #21
 8003a3c:	d8f6      	bhi.n	8003a2c <_printf_i+0x28>
 8003a3e:	a001      	add	r0, pc, #4	; (adr r0, 8003a44 <_printf_i+0x40>)
 8003a40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a44:	08003a9d 	.word	0x08003a9d
 8003a48:	08003ab1 	.word	0x08003ab1
 8003a4c:	08003a2d 	.word	0x08003a2d
 8003a50:	08003a2d 	.word	0x08003a2d
 8003a54:	08003a2d 	.word	0x08003a2d
 8003a58:	08003a2d 	.word	0x08003a2d
 8003a5c:	08003ab1 	.word	0x08003ab1
 8003a60:	08003a2d 	.word	0x08003a2d
 8003a64:	08003a2d 	.word	0x08003a2d
 8003a68:	08003a2d 	.word	0x08003a2d
 8003a6c:	08003a2d 	.word	0x08003a2d
 8003a70:	08003bbd 	.word	0x08003bbd
 8003a74:	08003ae1 	.word	0x08003ae1
 8003a78:	08003b9f 	.word	0x08003b9f
 8003a7c:	08003a2d 	.word	0x08003a2d
 8003a80:	08003a2d 	.word	0x08003a2d
 8003a84:	08003bdf 	.word	0x08003bdf
 8003a88:	08003a2d 	.word	0x08003a2d
 8003a8c:	08003ae1 	.word	0x08003ae1
 8003a90:	08003a2d 	.word	0x08003a2d
 8003a94:	08003a2d 	.word	0x08003a2d
 8003a98:	08003ba7 	.word	0x08003ba7
 8003a9c:	680b      	ldr	r3, [r1, #0]
 8003a9e:	1d1a      	adds	r2, r3, #4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	600a      	str	r2, [r1, #0]
 8003aa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0a3      	b.n	8003bf8 <_printf_i+0x1f4>
 8003ab0:	6825      	ldr	r5, [r4, #0]
 8003ab2:	6808      	ldr	r0, [r1, #0]
 8003ab4:	062e      	lsls	r6, r5, #24
 8003ab6:	f100 0304 	add.w	r3, r0, #4
 8003aba:	d50a      	bpl.n	8003ad2 <_printf_i+0xce>
 8003abc:	6805      	ldr	r5, [r0, #0]
 8003abe:	600b      	str	r3, [r1, #0]
 8003ac0:	2d00      	cmp	r5, #0
 8003ac2:	da03      	bge.n	8003acc <_printf_i+0xc8>
 8003ac4:	232d      	movs	r3, #45	; 0x2d
 8003ac6:	426d      	negs	r5, r5
 8003ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003acc:	485e      	ldr	r0, [pc, #376]	; (8003c48 <_printf_i+0x244>)
 8003ace:	230a      	movs	r3, #10
 8003ad0:	e019      	b.n	8003b06 <_printf_i+0x102>
 8003ad2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003ad6:	6805      	ldr	r5, [r0, #0]
 8003ad8:	600b      	str	r3, [r1, #0]
 8003ada:	bf18      	it	ne
 8003adc:	b22d      	sxthne	r5, r5
 8003ade:	e7ef      	b.n	8003ac0 <_printf_i+0xbc>
 8003ae0:	680b      	ldr	r3, [r1, #0]
 8003ae2:	6825      	ldr	r5, [r4, #0]
 8003ae4:	1d18      	adds	r0, r3, #4
 8003ae6:	6008      	str	r0, [r1, #0]
 8003ae8:	0628      	lsls	r0, r5, #24
 8003aea:	d501      	bpl.n	8003af0 <_printf_i+0xec>
 8003aec:	681d      	ldr	r5, [r3, #0]
 8003aee:	e002      	b.n	8003af6 <_printf_i+0xf2>
 8003af0:	0669      	lsls	r1, r5, #25
 8003af2:	d5fb      	bpl.n	8003aec <_printf_i+0xe8>
 8003af4:	881d      	ldrh	r5, [r3, #0]
 8003af6:	4854      	ldr	r0, [pc, #336]	; (8003c48 <_printf_i+0x244>)
 8003af8:	2f6f      	cmp	r7, #111	; 0x6f
 8003afa:	bf0c      	ite	eq
 8003afc:	2308      	moveq	r3, #8
 8003afe:	230a      	movne	r3, #10
 8003b00:	2100      	movs	r1, #0
 8003b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b06:	6866      	ldr	r6, [r4, #4]
 8003b08:	60a6      	str	r6, [r4, #8]
 8003b0a:	2e00      	cmp	r6, #0
 8003b0c:	bfa2      	ittt	ge
 8003b0e:	6821      	ldrge	r1, [r4, #0]
 8003b10:	f021 0104 	bicge.w	r1, r1, #4
 8003b14:	6021      	strge	r1, [r4, #0]
 8003b16:	b90d      	cbnz	r5, 8003b1c <_printf_i+0x118>
 8003b18:	2e00      	cmp	r6, #0
 8003b1a:	d04d      	beq.n	8003bb8 <_printf_i+0x1b4>
 8003b1c:	4616      	mov	r6, r2
 8003b1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b22:	fb03 5711 	mls	r7, r3, r1, r5
 8003b26:	5dc7      	ldrb	r7, [r0, r7]
 8003b28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b2c:	462f      	mov	r7, r5
 8003b2e:	42bb      	cmp	r3, r7
 8003b30:	460d      	mov	r5, r1
 8003b32:	d9f4      	bls.n	8003b1e <_printf_i+0x11a>
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d10b      	bne.n	8003b50 <_printf_i+0x14c>
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	07df      	lsls	r7, r3, #31
 8003b3c:	d508      	bpl.n	8003b50 <_printf_i+0x14c>
 8003b3e:	6923      	ldr	r3, [r4, #16]
 8003b40:	6861      	ldr	r1, [r4, #4]
 8003b42:	4299      	cmp	r1, r3
 8003b44:	bfde      	ittt	le
 8003b46:	2330      	movle	r3, #48	; 0x30
 8003b48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b50:	1b92      	subs	r2, r2, r6
 8003b52:	6122      	str	r2, [r4, #16]
 8003b54:	f8cd a000 	str.w	sl, [sp]
 8003b58:	464b      	mov	r3, r9
 8003b5a:	aa03      	add	r2, sp, #12
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	4640      	mov	r0, r8
 8003b60:	f7ff fee2 	bl	8003928 <_printf_common>
 8003b64:	3001      	adds	r0, #1
 8003b66:	d14c      	bne.n	8003c02 <_printf_i+0x1fe>
 8003b68:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6c:	b004      	add	sp, #16
 8003b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b72:	4835      	ldr	r0, [pc, #212]	; (8003c48 <_printf_i+0x244>)
 8003b74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	680e      	ldr	r6, [r1, #0]
 8003b7c:	061f      	lsls	r7, r3, #24
 8003b7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b82:	600e      	str	r6, [r1, #0]
 8003b84:	d514      	bpl.n	8003bb0 <_printf_i+0x1ac>
 8003b86:	07d9      	lsls	r1, r3, #31
 8003b88:	bf44      	itt	mi
 8003b8a:	f043 0320 	orrmi.w	r3, r3, #32
 8003b8e:	6023      	strmi	r3, [r4, #0]
 8003b90:	b91d      	cbnz	r5, 8003b9a <_printf_i+0x196>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	f023 0320 	bic.w	r3, r3, #32
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	2310      	movs	r3, #16
 8003b9c:	e7b0      	b.n	8003b00 <_printf_i+0xfc>
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	f043 0320 	orr.w	r3, r3, #32
 8003ba4:	6023      	str	r3, [r4, #0]
 8003ba6:	2378      	movs	r3, #120	; 0x78
 8003ba8:	4828      	ldr	r0, [pc, #160]	; (8003c4c <_printf_i+0x248>)
 8003baa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bae:	e7e3      	b.n	8003b78 <_printf_i+0x174>
 8003bb0:	065e      	lsls	r6, r3, #25
 8003bb2:	bf48      	it	mi
 8003bb4:	b2ad      	uxthmi	r5, r5
 8003bb6:	e7e6      	b.n	8003b86 <_printf_i+0x182>
 8003bb8:	4616      	mov	r6, r2
 8003bba:	e7bb      	b.n	8003b34 <_printf_i+0x130>
 8003bbc:	680b      	ldr	r3, [r1, #0]
 8003bbe:	6826      	ldr	r6, [r4, #0]
 8003bc0:	6960      	ldr	r0, [r4, #20]
 8003bc2:	1d1d      	adds	r5, r3, #4
 8003bc4:	600d      	str	r5, [r1, #0]
 8003bc6:	0635      	lsls	r5, r6, #24
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	d501      	bpl.n	8003bd0 <_printf_i+0x1cc>
 8003bcc:	6018      	str	r0, [r3, #0]
 8003bce:	e002      	b.n	8003bd6 <_printf_i+0x1d2>
 8003bd0:	0671      	lsls	r1, r6, #25
 8003bd2:	d5fb      	bpl.n	8003bcc <_printf_i+0x1c8>
 8003bd4:	8018      	strh	r0, [r3, #0]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6123      	str	r3, [r4, #16]
 8003bda:	4616      	mov	r6, r2
 8003bdc:	e7ba      	b.n	8003b54 <_printf_i+0x150>
 8003bde:	680b      	ldr	r3, [r1, #0]
 8003be0:	1d1a      	adds	r2, r3, #4
 8003be2:	600a      	str	r2, [r1, #0]
 8003be4:	681e      	ldr	r6, [r3, #0]
 8003be6:	6862      	ldr	r2, [r4, #4]
 8003be8:	2100      	movs	r1, #0
 8003bea:	4630      	mov	r0, r6
 8003bec:	f7fc faf0 	bl	80001d0 <memchr>
 8003bf0:	b108      	cbz	r0, 8003bf6 <_printf_i+0x1f2>
 8003bf2:	1b80      	subs	r0, r0, r6
 8003bf4:	6060      	str	r0, [r4, #4]
 8003bf6:	6863      	ldr	r3, [r4, #4]
 8003bf8:	6123      	str	r3, [r4, #16]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c00:	e7a8      	b.n	8003b54 <_printf_i+0x150>
 8003c02:	6923      	ldr	r3, [r4, #16]
 8003c04:	4632      	mov	r2, r6
 8003c06:	4649      	mov	r1, r9
 8003c08:	4640      	mov	r0, r8
 8003c0a:	47d0      	blx	sl
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	d0ab      	beq.n	8003b68 <_printf_i+0x164>
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	079b      	lsls	r3, r3, #30
 8003c14:	d413      	bmi.n	8003c3e <_printf_i+0x23a>
 8003c16:	68e0      	ldr	r0, [r4, #12]
 8003c18:	9b03      	ldr	r3, [sp, #12]
 8003c1a:	4298      	cmp	r0, r3
 8003c1c:	bfb8      	it	lt
 8003c1e:	4618      	movlt	r0, r3
 8003c20:	e7a4      	b.n	8003b6c <_printf_i+0x168>
 8003c22:	2301      	movs	r3, #1
 8003c24:	4632      	mov	r2, r6
 8003c26:	4649      	mov	r1, r9
 8003c28:	4640      	mov	r0, r8
 8003c2a:	47d0      	blx	sl
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d09b      	beq.n	8003b68 <_printf_i+0x164>
 8003c30:	3501      	adds	r5, #1
 8003c32:	68e3      	ldr	r3, [r4, #12]
 8003c34:	9903      	ldr	r1, [sp, #12]
 8003c36:	1a5b      	subs	r3, r3, r1
 8003c38:	42ab      	cmp	r3, r5
 8003c3a:	dcf2      	bgt.n	8003c22 <_printf_i+0x21e>
 8003c3c:	e7eb      	b.n	8003c16 <_printf_i+0x212>
 8003c3e:	2500      	movs	r5, #0
 8003c40:	f104 0619 	add.w	r6, r4, #25
 8003c44:	e7f5      	b.n	8003c32 <_printf_i+0x22e>
 8003c46:	bf00      	nop
 8003c48:	0800452b 	.word	0x0800452b
 8003c4c:	0800453c 	.word	0x0800453c

08003c50 <_sbrk_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	4d06      	ldr	r5, [pc, #24]	; (8003c6c <_sbrk_r+0x1c>)
 8003c54:	2300      	movs	r3, #0
 8003c56:	4604      	mov	r4, r0
 8003c58:	4608      	mov	r0, r1
 8003c5a:	602b      	str	r3, [r5, #0]
 8003c5c:	f7fd f880 	bl	8000d60 <_sbrk>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	d102      	bne.n	8003c6a <_sbrk_r+0x1a>
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	b103      	cbz	r3, 8003c6a <_sbrk_r+0x1a>
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	bd38      	pop	{r3, r4, r5, pc}
 8003c6c:	20000144 	.word	0x20000144

08003c70 <__swbuf_r>:
 8003c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c72:	460e      	mov	r6, r1
 8003c74:	4614      	mov	r4, r2
 8003c76:	4605      	mov	r5, r0
 8003c78:	b118      	cbz	r0, 8003c82 <__swbuf_r+0x12>
 8003c7a:	6983      	ldr	r3, [r0, #24]
 8003c7c:	b90b      	cbnz	r3, 8003c82 <__swbuf_r+0x12>
 8003c7e:	f000 f9d9 	bl	8004034 <__sinit>
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <__swbuf_r+0x98>)
 8003c84:	429c      	cmp	r4, r3
 8003c86:	d12b      	bne.n	8003ce0 <__swbuf_r+0x70>
 8003c88:	686c      	ldr	r4, [r5, #4]
 8003c8a:	69a3      	ldr	r3, [r4, #24]
 8003c8c:	60a3      	str	r3, [r4, #8]
 8003c8e:	89a3      	ldrh	r3, [r4, #12]
 8003c90:	071a      	lsls	r2, r3, #28
 8003c92:	d52f      	bpl.n	8003cf4 <__swbuf_r+0x84>
 8003c94:	6923      	ldr	r3, [r4, #16]
 8003c96:	b36b      	cbz	r3, 8003cf4 <__swbuf_r+0x84>
 8003c98:	6923      	ldr	r3, [r4, #16]
 8003c9a:	6820      	ldr	r0, [r4, #0]
 8003c9c:	1ac0      	subs	r0, r0, r3
 8003c9e:	6963      	ldr	r3, [r4, #20]
 8003ca0:	b2f6      	uxtb	r6, r6
 8003ca2:	4283      	cmp	r3, r0
 8003ca4:	4637      	mov	r7, r6
 8003ca6:	dc04      	bgt.n	8003cb2 <__swbuf_r+0x42>
 8003ca8:	4621      	mov	r1, r4
 8003caa:	4628      	mov	r0, r5
 8003cac:	f000 f92e 	bl	8003f0c <_fflush_r>
 8003cb0:	bb30      	cbnz	r0, 8003d00 <__swbuf_r+0x90>
 8003cb2:	68a3      	ldr	r3, [r4, #8]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	60a3      	str	r3, [r4, #8]
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	6022      	str	r2, [r4, #0]
 8003cbe:	701e      	strb	r6, [r3, #0]
 8003cc0:	6963      	ldr	r3, [r4, #20]
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	4283      	cmp	r3, r0
 8003cc6:	d004      	beq.n	8003cd2 <__swbuf_r+0x62>
 8003cc8:	89a3      	ldrh	r3, [r4, #12]
 8003cca:	07db      	lsls	r3, r3, #31
 8003ccc:	d506      	bpl.n	8003cdc <__swbuf_r+0x6c>
 8003cce:	2e0a      	cmp	r6, #10
 8003cd0:	d104      	bne.n	8003cdc <__swbuf_r+0x6c>
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f000 f919 	bl	8003f0c <_fflush_r>
 8003cda:	b988      	cbnz	r0, 8003d00 <__swbuf_r+0x90>
 8003cdc:	4638      	mov	r0, r7
 8003cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <__swbuf_r+0x9c>)
 8003ce2:	429c      	cmp	r4, r3
 8003ce4:	d101      	bne.n	8003cea <__swbuf_r+0x7a>
 8003ce6:	68ac      	ldr	r4, [r5, #8]
 8003ce8:	e7cf      	b.n	8003c8a <__swbuf_r+0x1a>
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <__swbuf_r+0xa0>)
 8003cec:	429c      	cmp	r4, r3
 8003cee:	bf08      	it	eq
 8003cf0:	68ec      	ldreq	r4, [r5, #12]
 8003cf2:	e7ca      	b.n	8003c8a <__swbuf_r+0x1a>
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f000 f80c 	bl	8003d14 <__swsetup_r>
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	d0cb      	beq.n	8003c98 <__swbuf_r+0x28>
 8003d00:	f04f 37ff 	mov.w	r7, #4294967295
 8003d04:	e7ea      	b.n	8003cdc <__swbuf_r+0x6c>
 8003d06:	bf00      	nop
 8003d08:	08004570 	.word	0x08004570
 8003d0c:	08004590 	.word	0x08004590
 8003d10:	08004550 	.word	0x08004550

08003d14 <__swsetup_r>:
 8003d14:	4b32      	ldr	r3, [pc, #200]	; (8003de0 <__swsetup_r+0xcc>)
 8003d16:	b570      	push	{r4, r5, r6, lr}
 8003d18:	681d      	ldr	r5, [r3, #0]
 8003d1a:	4606      	mov	r6, r0
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	b125      	cbz	r5, 8003d2a <__swsetup_r+0x16>
 8003d20:	69ab      	ldr	r3, [r5, #24]
 8003d22:	b913      	cbnz	r3, 8003d2a <__swsetup_r+0x16>
 8003d24:	4628      	mov	r0, r5
 8003d26:	f000 f985 	bl	8004034 <__sinit>
 8003d2a:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <__swsetup_r+0xd0>)
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	d10f      	bne.n	8003d50 <__swsetup_r+0x3c>
 8003d30:	686c      	ldr	r4, [r5, #4]
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d38:	0719      	lsls	r1, r3, #28
 8003d3a:	d42c      	bmi.n	8003d96 <__swsetup_r+0x82>
 8003d3c:	06dd      	lsls	r5, r3, #27
 8003d3e:	d411      	bmi.n	8003d64 <__swsetup_r+0x50>
 8003d40:	2309      	movs	r3, #9
 8003d42:	6033      	str	r3, [r6, #0]
 8003d44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d48:	81a3      	strh	r3, [r4, #12]
 8003d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4e:	e03e      	b.n	8003dce <__swsetup_r+0xba>
 8003d50:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <__swsetup_r+0xd4>)
 8003d52:	429c      	cmp	r4, r3
 8003d54:	d101      	bne.n	8003d5a <__swsetup_r+0x46>
 8003d56:	68ac      	ldr	r4, [r5, #8]
 8003d58:	e7eb      	b.n	8003d32 <__swsetup_r+0x1e>
 8003d5a:	4b24      	ldr	r3, [pc, #144]	; (8003dec <__swsetup_r+0xd8>)
 8003d5c:	429c      	cmp	r4, r3
 8003d5e:	bf08      	it	eq
 8003d60:	68ec      	ldreq	r4, [r5, #12]
 8003d62:	e7e6      	b.n	8003d32 <__swsetup_r+0x1e>
 8003d64:	0758      	lsls	r0, r3, #29
 8003d66:	d512      	bpl.n	8003d8e <__swsetup_r+0x7a>
 8003d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d6a:	b141      	cbz	r1, 8003d7e <__swsetup_r+0x6a>
 8003d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d70:	4299      	cmp	r1, r3
 8003d72:	d002      	beq.n	8003d7a <__swsetup_r+0x66>
 8003d74:	4630      	mov	r0, r6
 8003d76:	f7ff fbd3 	bl	8003520 <_free_r>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d84:	81a3      	strh	r3, [r4, #12]
 8003d86:	2300      	movs	r3, #0
 8003d88:	6063      	str	r3, [r4, #4]
 8003d8a:	6923      	ldr	r3, [r4, #16]
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f043 0308 	orr.w	r3, r3, #8
 8003d94:	81a3      	strh	r3, [r4, #12]
 8003d96:	6923      	ldr	r3, [r4, #16]
 8003d98:	b94b      	cbnz	r3, 8003dae <__swsetup_r+0x9a>
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da4:	d003      	beq.n	8003dae <__swsetup_r+0x9a>
 8003da6:	4621      	mov	r1, r4
 8003da8:	4630      	mov	r0, r6
 8003daa:	f000 fa07 	bl	80041bc <__smakebuf_r>
 8003dae:	89a0      	ldrh	r0, [r4, #12]
 8003db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003db4:	f010 0301 	ands.w	r3, r0, #1
 8003db8:	d00a      	beq.n	8003dd0 <__swsetup_r+0xbc>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60a3      	str	r3, [r4, #8]
 8003dbe:	6963      	ldr	r3, [r4, #20]
 8003dc0:	425b      	negs	r3, r3
 8003dc2:	61a3      	str	r3, [r4, #24]
 8003dc4:	6923      	ldr	r3, [r4, #16]
 8003dc6:	b943      	cbnz	r3, 8003dda <__swsetup_r+0xc6>
 8003dc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003dcc:	d1ba      	bne.n	8003d44 <__swsetup_r+0x30>
 8003dce:	bd70      	pop	{r4, r5, r6, pc}
 8003dd0:	0781      	lsls	r1, r0, #30
 8003dd2:	bf58      	it	pl
 8003dd4:	6963      	ldrpl	r3, [r4, #20]
 8003dd6:	60a3      	str	r3, [r4, #8]
 8003dd8:	e7f4      	b.n	8003dc4 <__swsetup_r+0xb0>
 8003dda:	2000      	movs	r0, #0
 8003ddc:	e7f7      	b.n	8003dce <__swsetup_r+0xba>
 8003dde:	bf00      	nop
 8003de0:	2000000c 	.word	0x2000000c
 8003de4:	08004570 	.word	0x08004570
 8003de8:	08004590 	.word	0x08004590
 8003dec:	08004550 	.word	0x08004550

08003df0 <abort>:
 8003df0:	b508      	push	{r3, lr}
 8003df2:	2006      	movs	r0, #6
 8003df4:	f000 fa56 	bl	80042a4 <raise>
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f7fc ff39 	bl	8000c70 <_exit>
	...

08003e00 <__sflush_r>:
 8003e00:	898a      	ldrh	r2, [r1, #12]
 8003e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e06:	4605      	mov	r5, r0
 8003e08:	0710      	lsls	r0, r2, #28
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	d458      	bmi.n	8003ec0 <__sflush_r+0xc0>
 8003e0e:	684b      	ldr	r3, [r1, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	dc05      	bgt.n	8003e20 <__sflush_r+0x20>
 8003e14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	dc02      	bgt.n	8003e20 <__sflush_r+0x20>
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e22:	2e00      	cmp	r6, #0
 8003e24:	d0f9      	beq.n	8003e1a <__sflush_r+0x1a>
 8003e26:	2300      	movs	r3, #0
 8003e28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e2c:	682f      	ldr	r7, [r5, #0]
 8003e2e:	602b      	str	r3, [r5, #0]
 8003e30:	d032      	beq.n	8003e98 <__sflush_r+0x98>
 8003e32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	075a      	lsls	r2, r3, #29
 8003e38:	d505      	bpl.n	8003e46 <__sflush_r+0x46>
 8003e3a:	6863      	ldr	r3, [r4, #4]
 8003e3c:	1ac0      	subs	r0, r0, r3
 8003e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e40:	b10b      	cbz	r3, 8003e46 <__sflush_r+0x46>
 8003e42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e44:	1ac0      	subs	r0, r0, r3
 8003e46:	2300      	movs	r3, #0
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e4c:	6a21      	ldr	r1, [r4, #32]
 8003e4e:	4628      	mov	r0, r5
 8003e50:	47b0      	blx	r6
 8003e52:	1c43      	adds	r3, r0, #1
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	d106      	bne.n	8003e66 <__sflush_r+0x66>
 8003e58:	6829      	ldr	r1, [r5, #0]
 8003e5a:	291d      	cmp	r1, #29
 8003e5c:	d82c      	bhi.n	8003eb8 <__sflush_r+0xb8>
 8003e5e:	4a2a      	ldr	r2, [pc, #168]	; (8003f08 <__sflush_r+0x108>)
 8003e60:	40ca      	lsrs	r2, r1
 8003e62:	07d6      	lsls	r6, r2, #31
 8003e64:	d528      	bpl.n	8003eb8 <__sflush_r+0xb8>
 8003e66:	2200      	movs	r2, #0
 8003e68:	6062      	str	r2, [r4, #4]
 8003e6a:	04d9      	lsls	r1, r3, #19
 8003e6c:	6922      	ldr	r2, [r4, #16]
 8003e6e:	6022      	str	r2, [r4, #0]
 8003e70:	d504      	bpl.n	8003e7c <__sflush_r+0x7c>
 8003e72:	1c42      	adds	r2, r0, #1
 8003e74:	d101      	bne.n	8003e7a <__sflush_r+0x7a>
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	b903      	cbnz	r3, 8003e7c <__sflush_r+0x7c>
 8003e7a:	6560      	str	r0, [r4, #84]	; 0x54
 8003e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e7e:	602f      	str	r7, [r5, #0]
 8003e80:	2900      	cmp	r1, #0
 8003e82:	d0ca      	beq.n	8003e1a <__sflush_r+0x1a>
 8003e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e88:	4299      	cmp	r1, r3
 8003e8a:	d002      	beq.n	8003e92 <__sflush_r+0x92>
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	f7ff fb47 	bl	8003520 <_free_r>
 8003e92:	2000      	movs	r0, #0
 8003e94:	6360      	str	r0, [r4, #52]	; 0x34
 8003e96:	e7c1      	b.n	8003e1c <__sflush_r+0x1c>
 8003e98:	6a21      	ldr	r1, [r4, #32]
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	47b0      	blx	r6
 8003ea0:	1c41      	adds	r1, r0, #1
 8003ea2:	d1c7      	bne.n	8003e34 <__sflush_r+0x34>
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0c4      	beq.n	8003e34 <__sflush_r+0x34>
 8003eaa:	2b1d      	cmp	r3, #29
 8003eac:	d001      	beq.n	8003eb2 <__sflush_r+0xb2>
 8003eae:	2b16      	cmp	r3, #22
 8003eb0:	d101      	bne.n	8003eb6 <__sflush_r+0xb6>
 8003eb2:	602f      	str	r7, [r5, #0]
 8003eb4:	e7b1      	b.n	8003e1a <__sflush_r+0x1a>
 8003eb6:	89a3      	ldrh	r3, [r4, #12]
 8003eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ebc:	81a3      	strh	r3, [r4, #12]
 8003ebe:	e7ad      	b.n	8003e1c <__sflush_r+0x1c>
 8003ec0:	690f      	ldr	r7, [r1, #16]
 8003ec2:	2f00      	cmp	r7, #0
 8003ec4:	d0a9      	beq.n	8003e1a <__sflush_r+0x1a>
 8003ec6:	0793      	lsls	r3, r2, #30
 8003ec8:	680e      	ldr	r6, [r1, #0]
 8003eca:	bf08      	it	eq
 8003ecc:	694b      	ldreq	r3, [r1, #20]
 8003ece:	600f      	str	r7, [r1, #0]
 8003ed0:	bf18      	it	ne
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	eba6 0807 	sub.w	r8, r6, r7
 8003ed8:	608b      	str	r3, [r1, #8]
 8003eda:	f1b8 0f00 	cmp.w	r8, #0
 8003ede:	dd9c      	ble.n	8003e1a <__sflush_r+0x1a>
 8003ee0:	6a21      	ldr	r1, [r4, #32]
 8003ee2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ee4:	4643      	mov	r3, r8
 8003ee6:	463a      	mov	r2, r7
 8003ee8:	4628      	mov	r0, r5
 8003eea:	47b0      	blx	r6
 8003eec:	2800      	cmp	r0, #0
 8003eee:	dc06      	bgt.n	8003efe <__sflush_r+0xfe>
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef6:	81a3      	strh	r3, [r4, #12]
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	e78e      	b.n	8003e1c <__sflush_r+0x1c>
 8003efe:	4407      	add	r7, r0
 8003f00:	eba8 0800 	sub.w	r8, r8, r0
 8003f04:	e7e9      	b.n	8003eda <__sflush_r+0xda>
 8003f06:	bf00      	nop
 8003f08:	20400001 	.word	0x20400001

08003f0c <_fflush_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	690b      	ldr	r3, [r1, #16]
 8003f10:	4605      	mov	r5, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	b913      	cbnz	r3, 8003f1c <_fflush_r+0x10>
 8003f16:	2500      	movs	r5, #0
 8003f18:	4628      	mov	r0, r5
 8003f1a:	bd38      	pop	{r3, r4, r5, pc}
 8003f1c:	b118      	cbz	r0, 8003f26 <_fflush_r+0x1a>
 8003f1e:	6983      	ldr	r3, [r0, #24]
 8003f20:	b90b      	cbnz	r3, 8003f26 <_fflush_r+0x1a>
 8003f22:	f000 f887 	bl	8004034 <__sinit>
 8003f26:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <_fflush_r+0x6c>)
 8003f28:	429c      	cmp	r4, r3
 8003f2a:	d11b      	bne.n	8003f64 <_fflush_r+0x58>
 8003f2c:	686c      	ldr	r4, [r5, #4]
 8003f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0ef      	beq.n	8003f16 <_fflush_r+0xa>
 8003f36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f38:	07d0      	lsls	r0, r2, #31
 8003f3a:	d404      	bmi.n	8003f46 <_fflush_r+0x3a>
 8003f3c:	0599      	lsls	r1, r3, #22
 8003f3e:	d402      	bmi.n	8003f46 <_fflush_r+0x3a>
 8003f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f42:	f000 f915 	bl	8004170 <__retarget_lock_acquire_recursive>
 8003f46:	4628      	mov	r0, r5
 8003f48:	4621      	mov	r1, r4
 8003f4a:	f7ff ff59 	bl	8003e00 <__sflush_r>
 8003f4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f50:	07da      	lsls	r2, r3, #31
 8003f52:	4605      	mov	r5, r0
 8003f54:	d4e0      	bmi.n	8003f18 <_fflush_r+0xc>
 8003f56:	89a3      	ldrh	r3, [r4, #12]
 8003f58:	059b      	lsls	r3, r3, #22
 8003f5a:	d4dd      	bmi.n	8003f18 <_fflush_r+0xc>
 8003f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f5e:	f000 f908 	bl	8004172 <__retarget_lock_release_recursive>
 8003f62:	e7d9      	b.n	8003f18 <_fflush_r+0xc>
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <_fflush_r+0x70>)
 8003f66:	429c      	cmp	r4, r3
 8003f68:	d101      	bne.n	8003f6e <_fflush_r+0x62>
 8003f6a:	68ac      	ldr	r4, [r5, #8]
 8003f6c:	e7df      	b.n	8003f2e <_fflush_r+0x22>
 8003f6e:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <_fflush_r+0x74>)
 8003f70:	429c      	cmp	r4, r3
 8003f72:	bf08      	it	eq
 8003f74:	68ec      	ldreq	r4, [r5, #12]
 8003f76:	e7da      	b.n	8003f2e <_fflush_r+0x22>
 8003f78:	08004570 	.word	0x08004570
 8003f7c:	08004590 	.word	0x08004590
 8003f80:	08004550 	.word	0x08004550

08003f84 <std>:
 8003f84:	2300      	movs	r3, #0
 8003f86:	b510      	push	{r4, lr}
 8003f88:	4604      	mov	r4, r0
 8003f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8003f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f92:	6083      	str	r3, [r0, #8]
 8003f94:	8181      	strh	r1, [r0, #12]
 8003f96:	6643      	str	r3, [r0, #100]	; 0x64
 8003f98:	81c2      	strh	r2, [r0, #14]
 8003f9a:	6183      	str	r3, [r0, #24]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	305c      	adds	r0, #92	; 0x5c
 8003fa2:	f7ff fa3d 	bl	8003420 <memset>
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <std+0x38>)
 8003fa8:	6263      	str	r3, [r4, #36]	; 0x24
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <std+0x3c>)
 8003fac:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <std+0x40>)
 8003fb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <std+0x44>)
 8003fb4:	6224      	str	r4, [r4, #32]
 8003fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8003fb8:	bd10      	pop	{r4, pc}
 8003fba:	bf00      	nop
 8003fbc:	080042dd 	.word	0x080042dd
 8003fc0:	080042ff 	.word	0x080042ff
 8003fc4:	08004337 	.word	0x08004337
 8003fc8:	0800435b 	.word	0x0800435b

08003fcc <_cleanup_r>:
 8003fcc:	4901      	ldr	r1, [pc, #4]	; (8003fd4 <_cleanup_r+0x8>)
 8003fce:	f000 b8af 	b.w	8004130 <_fwalk_reent>
 8003fd2:	bf00      	nop
 8003fd4:	08003f0d 	.word	0x08003f0d

08003fd8 <__sfmoreglue>:
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	1e4a      	subs	r2, r1, #1
 8003fdc:	2568      	movs	r5, #104	; 0x68
 8003fde:	4355      	muls	r5, r2
 8003fe0:	460e      	mov	r6, r1
 8003fe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003fe6:	f7ff faeb 	bl	80035c0 <_malloc_r>
 8003fea:	4604      	mov	r4, r0
 8003fec:	b140      	cbz	r0, 8004000 <__sfmoreglue+0x28>
 8003fee:	2100      	movs	r1, #0
 8003ff0:	e9c0 1600 	strd	r1, r6, [r0]
 8003ff4:	300c      	adds	r0, #12
 8003ff6:	60a0      	str	r0, [r4, #8]
 8003ff8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ffc:	f7ff fa10 	bl	8003420 <memset>
 8004000:	4620      	mov	r0, r4
 8004002:	bd70      	pop	{r4, r5, r6, pc}

08004004 <__sfp_lock_acquire>:
 8004004:	4801      	ldr	r0, [pc, #4]	; (800400c <__sfp_lock_acquire+0x8>)
 8004006:	f000 b8b3 	b.w	8004170 <__retarget_lock_acquire_recursive>
 800400a:	bf00      	nop
 800400c:	20000140 	.word	0x20000140

08004010 <__sfp_lock_release>:
 8004010:	4801      	ldr	r0, [pc, #4]	; (8004018 <__sfp_lock_release+0x8>)
 8004012:	f000 b8ae 	b.w	8004172 <__retarget_lock_release_recursive>
 8004016:	bf00      	nop
 8004018:	20000140 	.word	0x20000140

0800401c <__sinit_lock_acquire>:
 800401c:	4801      	ldr	r0, [pc, #4]	; (8004024 <__sinit_lock_acquire+0x8>)
 800401e:	f000 b8a7 	b.w	8004170 <__retarget_lock_acquire_recursive>
 8004022:	bf00      	nop
 8004024:	2000013b 	.word	0x2000013b

08004028 <__sinit_lock_release>:
 8004028:	4801      	ldr	r0, [pc, #4]	; (8004030 <__sinit_lock_release+0x8>)
 800402a:	f000 b8a2 	b.w	8004172 <__retarget_lock_release_recursive>
 800402e:	bf00      	nop
 8004030:	2000013b 	.word	0x2000013b

08004034 <__sinit>:
 8004034:	b510      	push	{r4, lr}
 8004036:	4604      	mov	r4, r0
 8004038:	f7ff fff0 	bl	800401c <__sinit_lock_acquire>
 800403c:	69a3      	ldr	r3, [r4, #24]
 800403e:	b11b      	cbz	r3, 8004048 <__sinit+0x14>
 8004040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004044:	f7ff bff0 	b.w	8004028 <__sinit_lock_release>
 8004048:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800404c:	6523      	str	r3, [r4, #80]	; 0x50
 800404e:	4b13      	ldr	r3, [pc, #76]	; (800409c <__sinit+0x68>)
 8004050:	4a13      	ldr	r2, [pc, #76]	; (80040a0 <__sinit+0x6c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	62a2      	str	r2, [r4, #40]	; 0x28
 8004056:	42a3      	cmp	r3, r4
 8004058:	bf04      	itt	eq
 800405a:	2301      	moveq	r3, #1
 800405c:	61a3      	streq	r3, [r4, #24]
 800405e:	4620      	mov	r0, r4
 8004060:	f000 f820 	bl	80040a4 <__sfp>
 8004064:	6060      	str	r0, [r4, #4]
 8004066:	4620      	mov	r0, r4
 8004068:	f000 f81c 	bl	80040a4 <__sfp>
 800406c:	60a0      	str	r0, [r4, #8]
 800406e:	4620      	mov	r0, r4
 8004070:	f000 f818 	bl	80040a4 <__sfp>
 8004074:	2200      	movs	r2, #0
 8004076:	60e0      	str	r0, [r4, #12]
 8004078:	2104      	movs	r1, #4
 800407a:	6860      	ldr	r0, [r4, #4]
 800407c:	f7ff ff82 	bl	8003f84 <std>
 8004080:	68a0      	ldr	r0, [r4, #8]
 8004082:	2201      	movs	r2, #1
 8004084:	2109      	movs	r1, #9
 8004086:	f7ff ff7d 	bl	8003f84 <std>
 800408a:	68e0      	ldr	r0, [r4, #12]
 800408c:	2202      	movs	r2, #2
 800408e:	2112      	movs	r1, #18
 8004090:	f7ff ff78 	bl	8003f84 <std>
 8004094:	2301      	movs	r3, #1
 8004096:	61a3      	str	r3, [r4, #24]
 8004098:	e7d2      	b.n	8004040 <__sinit+0xc>
 800409a:	bf00      	nop
 800409c:	08004464 	.word	0x08004464
 80040a0:	08003fcd 	.word	0x08003fcd

080040a4 <__sfp>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	4607      	mov	r7, r0
 80040a8:	f7ff ffac 	bl	8004004 <__sfp_lock_acquire>
 80040ac:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <__sfp+0x84>)
 80040ae:	681e      	ldr	r6, [r3, #0]
 80040b0:	69b3      	ldr	r3, [r6, #24]
 80040b2:	b913      	cbnz	r3, 80040ba <__sfp+0x16>
 80040b4:	4630      	mov	r0, r6
 80040b6:	f7ff ffbd 	bl	8004034 <__sinit>
 80040ba:	3648      	adds	r6, #72	; 0x48
 80040bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	d503      	bpl.n	80040cc <__sfp+0x28>
 80040c4:	6833      	ldr	r3, [r6, #0]
 80040c6:	b30b      	cbz	r3, 800410c <__sfp+0x68>
 80040c8:	6836      	ldr	r6, [r6, #0]
 80040ca:	e7f7      	b.n	80040bc <__sfp+0x18>
 80040cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80040d0:	b9d5      	cbnz	r5, 8004108 <__sfp+0x64>
 80040d2:	4b16      	ldr	r3, [pc, #88]	; (800412c <__sfp+0x88>)
 80040d4:	60e3      	str	r3, [r4, #12]
 80040d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040da:	6665      	str	r5, [r4, #100]	; 0x64
 80040dc:	f000 f847 	bl	800416e <__retarget_lock_init_recursive>
 80040e0:	f7ff ff96 	bl	8004010 <__sfp_lock_release>
 80040e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80040e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80040ec:	6025      	str	r5, [r4, #0]
 80040ee:	61a5      	str	r5, [r4, #24]
 80040f0:	2208      	movs	r2, #8
 80040f2:	4629      	mov	r1, r5
 80040f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040f8:	f7ff f992 	bl	8003420 <memset>
 80040fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004104:	4620      	mov	r0, r4
 8004106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004108:	3468      	adds	r4, #104	; 0x68
 800410a:	e7d9      	b.n	80040c0 <__sfp+0x1c>
 800410c:	2104      	movs	r1, #4
 800410e:	4638      	mov	r0, r7
 8004110:	f7ff ff62 	bl	8003fd8 <__sfmoreglue>
 8004114:	4604      	mov	r4, r0
 8004116:	6030      	str	r0, [r6, #0]
 8004118:	2800      	cmp	r0, #0
 800411a:	d1d5      	bne.n	80040c8 <__sfp+0x24>
 800411c:	f7ff ff78 	bl	8004010 <__sfp_lock_release>
 8004120:	230c      	movs	r3, #12
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	e7ee      	b.n	8004104 <__sfp+0x60>
 8004126:	bf00      	nop
 8004128:	08004464 	.word	0x08004464
 800412c:	ffff0001 	.word	0xffff0001

08004130 <_fwalk_reent>:
 8004130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004134:	4606      	mov	r6, r0
 8004136:	4688      	mov	r8, r1
 8004138:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800413c:	2700      	movs	r7, #0
 800413e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004142:	f1b9 0901 	subs.w	r9, r9, #1
 8004146:	d505      	bpl.n	8004154 <_fwalk_reent+0x24>
 8004148:	6824      	ldr	r4, [r4, #0]
 800414a:	2c00      	cmp	r4, #0
 800414c:	d1f7      	bne.n	800413e <_fwalk_reent+0xe>
 800414e:	4638      	mov	r0, r7
 8004150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004154:	89ab      	ldrh	r3, [r5, #12]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d907      	bls.n	800416a <_fwalk_reent+0x3a>
 800415a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800415e:	3301      	adds	r3, #1
 8004160:	d003      	beq.n	800416a <_fwalk_reent+0x3a>
 8004162:	4629      	mov	r1, r5
 8004164:	4630      	mov	r0, r6
 8004166:	47c0      	blx	r8
 8004168:	4307      	orrs	r7, r0
 800416a:	3568      	adds	r5, #104	; 0x68
 800416c:	e7e9      	b.n	8004142 <_fwalk_reent+0x12>

0800416e <__retarget_lock_init_recursive>:
 800416e:	4770      	bx	lr

08004170 <__retarget_lock_acquire_recursive>:
 8004170:	4770      	bx	lr

08004172 <__retarget_lock_release_recursive>:
 8004172:	4770      	bx	lr

08004174 <__swhatbuf_r>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	460e      	mov	r6, r1
 8004178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800417c:	2900      	cmp	r1, #0
 800417e:	b096      	sub	sp, #88	; 0x58
 8004180:	4614      	mov	r4, r2
 8004182:	461d      	mov	r5, r3
 8004184:	da07      	bge.n	8004196 <__swhatbuf_r+0x22>
 8004186:	2300      	movs	r3, #0
 8004188:	602b      	str	r3, [r5, #0]
 800418a:	89b3      	ldrh	r3, [r6, #12]
 800418c:	061a      	lsls	r2, r3, #24
 800418e:	d410      	bmi.n	80041b2 <__swhatbuf_r+0x3e>
 8004190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004194:	e00e      	b.n	80041b4 <__swhatbuf_r+0x40>
 8004196:	466a      	mov	r2, sp
 8004198:	f000 f906 	bl	80043a8 <_fstat_r>
 800419c:	2800      	cmp	r0, #0
 800419e:	dbf2      	blt.n	8004186 <__swhatbuf_r+0x12>
 80041a0:	9a01      	ldr	r2, [sp, #4]
 80041a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80041a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80041aa:	425a      	negs	r2, r3
 80041ac:	415a      	adcs	r2, r3
 80041ae:	602a      	str	r2, [r5, #0]
 80041b0:	e7ee      	b.n	8004190 <__swhatbuf_r+0x1c>
 80041b2:	2340      	movs	r3, #64	; 0x40
 80041b4:	2000      	movs	r0, #0
 80041b6:	6023      	str	r3, [r4, #0]
 80041b8:	b016      	add	sp, #88	; 0x58
 80041ba:	bd70      	pop	{r4, r5, r6, pc}

080041bc <__smakebuf_r>:
 80041bc:	898b      	ldrh	r3, [r1, #12]
 80041be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041c0:	079d      	lsls	r5, r3, #30
 80041c2:	4606      	mov	r6, r0
 80041c4:	460c      	mov	r4, r1
 80041c6:	d507      	bpl.n	80041d8 <__smakebuf_r+0x1c>
 80041c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	6123      	str	r3, [r4, #16]
 80041d0:	2301      	movs	r3, #1
 80041d2:	6163      	str	r3, [r4, #20]
 80041d4:	b002      	add	sp, #8
 80041d6:	bd70      	pop	{r4, r5, r6, pc}
 80041d8:	ab01      	add	r3, sp, #4
 80041da:	466a      	mov	r2, sp
 80041dc:	f7ff ffca 	bl	8004174 <__swhatbuf_r>
 80041e0:	9900      	ldr	r1, [sp, #0]
 80041e2:	4605      	mov	r5, r0
 80041e4:	4630      	mov	r0, r6
 80041e6:	f7ff f9eb 	bl	80035c0 <_malloc_r>
 80041ea:	b948      	cbnz	r0, 8004200 <__smakebuf_r+0x44>
 80041ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041f0:	059a      	lsls	r2, r3, #22
 80041f2:	d4ef      	bmi.n	80041d4 <__smakebuf_r+0x18>
 80041f4:	f023 0303 	bic.w	r3, r3, #3
 80041f8:	f043 0302 	orr.w	r3, r3, #2
 80041fc:	81a3      	strh	r3, [r4, #12]
 80041fe:	e7e3      	b.n	80041c8 <__smakebuf_r+0xc>
 8004200:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <__smakebuf_r+0x7c>)
 8004202:	62b3      	str	r3, [r6, #40]	; 0x28
 8004204:	89a3      	ldrh	r3, [r4, #12]
 8004206:	6020      	str	r0, [r4, #0]
 8004208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420c:	81a3      	strh	r3, [r4, #12]
 800420e:	9b00      	ldr	r3, [sp, #0]
 8004210:	6163      	str	r3, [r4, #20]
 8004212:	9b01      	ldr	r3, [sp, #4]
 8004214:	6120      	str	r0, [r4, #16]
 8004216:	b15b      	cbz	r3, 8004230 <__smakebuf_r+0x74>
 8004218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800421c:	4630      	mov	r0, r6
 800421e:	f000 f8d5 	bl	80043cc <_isatty_r>
 8004222:	b128      	cbz	r0, 8004230 <__smakebuf_r+0x74>
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	f023 0303 	bic.w	r3, r3, #3
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	81a3      	strh	r3, [r4, #12]
 8004230:	89a0      	ldrh	r0, [r4, #12]
 8004232:	4305      	orrs	r5, r0
 8004234:	81a5      	strh	r5, [r4, #12]
 8004236:	e7cd      	b.n	80041d4 <__smakebuf_r+0x18>
 8004238:	08003fcd 	.word	0x08003fcd

0800423c <__malloc_lock>:
 800423c:	4801      	ldr	r0, [pc, #4]	; (8004244 <__malloc_lock+0x8>)
 800423e:	f7ff bf97 	b.w	8004170 <__retarget_lock_acquire_recursive>
 8004242:	bf00      	nop
 8004244:	2000013c 	.word	0x2000013c

08004248 <__malloc_unlock>:
 8004248:	4801      	ldr	r0, [pc, #4]	; (8004250 <__malloc_unlock+0x8>)
 800424a:	f7ff bf92 	b.w	8004172 <__retarget_lock_release_recursive>
 800424e:	bf00      	nop
 8004250:	2000013c 	.word	0x2000013c

08004254 <_raise_r>:
 8004254:	291f      	cmp	r1, #31
 8004256:	b538      	push	{r3, r4, r5, lr}
 8004258:	4604      	mov	r4, r0
 800425a:	460d      	mov	r5, r1
 800425c:	d904      	bls.n	8004268 <_raise_r+0x14>
 800425e:	2316      	movs	r3, #22
 8004260:	6003      	str	r3, [r0, #0]
 8004262:	f04f 30ff 	mov.w	r0, #4294967295
 8004266:	bd38      	pop	{r3, r4, r5, pc}
 8004268:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800426a:	b112      	cbz	r2, 8004272 <_raise_r+0x1e>
 800426c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004270:	b94b      	cbnz	r3, 8004286 <_raise_r+0x32>
 8004272:	4620      	mov	r0, r4
 8004274:	f000 f830 	bl	80042d8 <_getpid_r>
 8004278:	462a      	mov	r2, r5
 800427a:	4601      	mov	r1, r0
 800427c:	4620      	mov	r0, r4
 800427e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004282:	f000 b817 	b.w	80042b4 <_kill_r>
 8004286:	2b01      	cmp	r3, #1
 8004288:	d00a      	beq.n	80042a0 <_raise_r+0x4c>
 800428a:	1c59      	adds	r1, r3, #1
 800428c:	d103      	bne.n	8004296 <_raise_r+0x42>
 800428e:	2316      	movs	r3, #22
 8004290:	6003      	str	r3, [r0, #0]
 8004292:	2001      	movs	r0, #1
 8004294:	e7e7      	b.n	8004266 <_raise_r+0x12>
 8004296:	2400      	movs	r4, #0
 8004298:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800429c:	4628      	mov	r0, r5
 800429e:	4798      	blx	r3
 80042a0:	2000      	movs	r0, #0
 80042a2:	e7e0      	b.n	8004266 <_raise_r+0x12>

080042a4 <raise>:
 80042a4:	4b02      	ldr	r3, [pc, #8]	; (80042b0 <raise+0xc>)
 80042a6:	4601      	mov	r1, r0
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	f7ff bfd3 	b.w	8004254 <_raise_r>
 80042ae:	bf00      	nop
 80042b0:	2000000c 	.word	0x2000000c

080042b4 <_kill_r>:
 80042b4:	b538      	push	{r3, r4, r5, lr}
 80042b6:	4d07      	ldr	r5, [pc, #28]	; (80042d4 <_kill_r+0x20>)
 80042b8:	2300      	movs	r3, #0
 80042ba:	4604      	mov	r4, r0
 80042bc:	4608      	mov	r0, r1
 80042be:	4611      	mov	r1, r2
 80042c0:	602b      	str	r3, [r5, #0]
 80042c2:	f7fc fcc5 	bl	8000c50 <_kill>
 80042c6:	1c43      	adds	r3, r0, #1
 80042c8:	d102      	bne.n	80042d0 <_kill_r+0x1c>
 80042ca:	682b      	ldr	r3, [r5, #0]
 80042cc:	b103      	cbz	r3, 80042d0 <_kill_r+0x1c>
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	bd38      	pop	{r3, r4, r5, pc}
 80042d2:	bf00      	nop
 80042d4:	20000144 	.word	0x20000144

080042d8 <_getpid_r>:
 80042d8:	f7fc bcb2 	b.w	8000c40 <_getpid>

080042dc <__sread>:
 80042dc:	b510      	push	{r4, lr}
 80042de:	460c      	mov	r4, r1
 80042e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042e4:	f000 f894 	bl	8004410 <_read_r>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	bfab      	itete	ge
 80042ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042ee:	89a3      	ldrhlt	r3, [r4, #12]
 80042f0:	181b      	addge	r3, r3, r0
 80042f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042f6:	bfac      	ite	ge
 80042f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80042fa:	81a3      	strhlt	r3, [r4, #12]
 80042fc:	bd10      	pop	{r4, pc}

080042fe <__swrite>:
 80042fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004302:	461f      	mov	r7, r3
 8004304:	898b      	ldrh	r3, [r1, #12]
 8004306:	05db      	lsls	r3, r3, #23
 8004308:	4605      	mov	r5, r0
 800430a:	460c      	mov	r4, r1
 800430c:	4616      	mov	r6, r2
 800430e:	d505      	bpl.n	800431c <__swrite+0x1e>
 8004310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004314:	2302      	movs	r3, #2
 8004316:	2200      	movs	r2, #0
 8004318:	f000 f868 	bl	80043ec <_lseek_r>
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004326:	81a3      	strh	r3, [r4, #12]
 8004328:	4632      	mov	r2, r6
 800432a:	463b      	mov	r3, r7
 800432c:	4628      	mov	r0, r5
 800432e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004332:	f000 b817 	b.w	8004364 <_write_r>

08004336 <__sseek>:
 8004336:	b510      	push	{r4, lr}
 8004338:	460c      	mov	r4, r1
 800433a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800433e:	f000 f855 	bl	80043ec <_lseek_r>
 8004342:	1c43      	adds	r3, r0, #1
 8004344:	89a3      	ldrh	r3, [r4, #12]
 8004346:	bf15      	itete	ne
 8004348:	6560      	strne	r0, [r4, #84]	; 0x54
 800434a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800434e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004352:	81a3      	strheq	r3, [r4, #12]
 8004354:	bf18      	it	ne
 8004356:	81a3      	strhne	r3, [r4, #12]
 8004358:	bd10      	pop	{r4, pc}

0800435a <__sclose>:
 800435a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800435e:	f000 b813 	b.w	8004388 <_close_r>
	...

08004364 <_write_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4d07      	ldr	r5, [pc, #28]	; (8004384 <_write_r+0x20>)
 8004368:	4604      	mov	r4, r0
 800436a:	4608      	mov	r0, r1
 800436c:	4611      	mov	r1, r2
 800436e:	2200      	movs	r2, #0
 8004370:	602a      	str	r2, [r5, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	f7fc fca3 	bl	8000cbe <_write>
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	d102      	bne.n	8004382 <_write_r+0x1e>
 800437c:	682b      	ldr	r3, [r5, #0]
 800437e:	b103      	cbz	r3, 8004382 <_write_r+0x1e>
 8004380:	6023      	str	r3, [r4, #0]
 8004382:	bd38      	pop	{r3, r4, r5, pc}
 8004384:	20000144 	.word	0x20000144

08004388 <_close_r>:
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	4d06      	ldr	r5, [pc, #24]	; (80043a4 <_close_r+0x1c>)
 800438c:	2300      	movs	r3, #0
 800438e:	4604      	mov	r4, r0
 8004390:	4608      	mov	r0, r1
 8004392:	602b      	str	r3, [r5, #0]
 8004394:	f7fc fcaf 	bl	8000cf6 <_close>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d102      	bne.n	80043a2 <_close_r+0x1a>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	b103      	cbz	r3, 80043a2 <_close_r+0x1a>
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	20000144 	.word	0x20000144

080043a8 <_fstat_r>:
 80043a8:	b538      	push	{r3, r4, r5, lr}
 80043aa:	4d07      	ldr	r5, [pc, #28]	; (80043c8 <_fstat_r+0x20>)
 80043ac:	2300      	movs	r3, #0
 80043ae:	4604      	mov	r4, r0
 80043b0:	4608      	mov	r0, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	602b      	str	r3, [r5, #0]
 80043b6:	f7fc fcaa 	bl	8000d0e <_fstat>
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	d102      	bne.n	80043c4 <_fstat_r+0x1c>
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	b103      	cbz	r3, 80043c4 <_fstat_r+0x1c>
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	bd38      	pop	{r3, r4, r5, pc}
 80043c6:	bf00      	nop
 80043c8:	20000144 	.word	0x20000144

080043cc <_isatty_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4d06      	ldr	r5, [pc, #24]	; (80043e8 <_isatty_r+0x1c>)
 80043d0:	2300      	movs	r3, #0
 80043d2:	4604      	mov	r4, r0
 80043d4:	4608      	mov	r0, r1
 80043d6:	602b      	str	r3, [r5, #0]
 80043d8:	f7fc fca9 	bl	8000d2e <_isatty>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d102      	bne.n	80043e6 <_isatty_r+0x1a>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	b103      	cbz	r3, 80043e6 <_isatty_r+0x1a>
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	20000144 	.word	0x20000144

080043ec <_lseek_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4d07      	ldr	r5, [pc, #28]	; (800440c <_lseek_r+0x20>)
 80043f0:	4604      	mov	r4, r0
 80043f2:	4608      	mov	r0, r1
 80043f4:	4611      	mov	r1, r2
 80043f6:	2200      	movs	r2, #0
 80043f8:	602a      	str	r2, [r5, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f7fc fca2 	bl	8000d44 <_lseek>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d102      	bne.n	800440a <_lseek_r+0x1e>
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	b103      	cbz	r3, 800440a <_lseek_r+0x1e>
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	bd38      	pop	{r3, r4, r5, pc}
 800440c:	20000144 	.word	0x20000144

08004410 <_read_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4d07      	ldr	r5, [pc, #28]	; (8004430 <_read_r+0x20>)
 8004414:	4604      	mov	r4, r0
 8004416:	4608      	mov	r0, r1
 8004418:	4611      	mov	r1, r2
 800441a:	2200      	movs	r2, #0
 800441c:	602a      	str	r2, [r5, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	f7fc fc30 	bl	8000c84 <_read>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d102      	bne.n	800442e <_read_r+0x1e>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	b103      	cbz	r3, 800442e <_read_r+0x1e>
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	20000144 	.word	0x20000144

08004434 <_init>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	bf00      	nop
 8004438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443a:	bc08      	pop	{r3}
 800443c:	469e      	mov	lr, r3
 800443e:	4770      	bx	lr

08004440 <_fini>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	bf00      	nop
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr
